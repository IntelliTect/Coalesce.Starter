@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@using Microsoft.VisualStudio.Web.CodeGeneration
@{
    ContextInfo contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }
    var securityInfo = model.SecurityInfo;

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce.Controllers");
    namespaces.Add("IntelliTect.Coalesce.Data");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Helpers.IncludeTree");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
    namespaces.Add("Microsoft.AspNetCore.Authorization");
    namespaces.Add("Microsoft.AspNetCore.Mvc");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.ComponentModel.DataAnnotations");
    namespaces.Add("System.Net");
    namespaces.Add("System.Threading.Tasks");
    namespaces.Add($"{namespaceName}.Models");

    var createIf = "";
    var editElseIf = "";
    

    // Check if creates/edits aren't allowed
    @if (model.PrimaryKey.Type.IsString)
    {
        createIf = $"if (string.IsNullOrWhiteSpace(dto.{model.PrimaryKey.Name}) && !Model.SecurityInfo.IsCreateAllowed(User)) {{";
        editElseIf = $"else if (!string.IsNullOrWhiteSpace(dto.{model.PrimaryKey.Name}) && !Model.SecurityInfo.IsEditAllowed(User)) {{";
    }
    else if (model.IsDto)
    {
        createIf = $"if (dto.{model.PrimaryKey.Name} == 0 && !Model.SecurityInfo.IsCreateAllowed(User)) {{";
        editElseIf = $"else if (dto.{model.PrimaryKey.Name} != 0 && !Model.SecurityInfo.IsEditAllowed(User)) {{";
    }
    else
    {
        createIf = $"if (!dto.{model.PrimaryKey.Name}.HasValue && !Model.SecurityInfo.IsCreateAllowed(User)) {{";
        editElseIf = $"else if (dto.{model.PrimaryKey.Name}.HasValue && !Model.SecurityInfo.IsEditAllowed(User)) {{";
    }
        

}
@foreach (var ns in ReflectionRepository.Namespaces.Where(f => f != "System"))
{
    if (!namespaces.Contains(ns)) { namespaces.Add(ns); }
}
@foreach (var method in model.Methods)
{
    var ns = method.ReturnType.PureType.FullNamespace;
    if (!ns.StartsWith("System"))
    {
        if (!namespaces.Contains(ns)) { namespaces.Add(ns); }
    }
}
@foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)))
{
    @:using @ns;
}

namespace @(namespaceName).Api
{
@if (model.ApiRouted) {
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
    @:[Route("@Model.AreaName/api/[controller]")]
    }
    else
    {
    @:[Route("api/[controller]")]
    }
}
    @(securityInfo.ClassAnnotation)
    public partial class @(model.ApiControllerClassName)
    : LocalBaseApiController<@(model.BaseViewModel.FullName), @(model.DtoName)>
    {
        protected ClassViewModel Model;

        public @(model.ApiControllerClassName)()
        {
            Model = ReflectionRepository.Models.Single(m => m.Name == "@(model.Name)");
        }

        @if (securityInfo.IsReadAllowed())
        {
        <text>
        /// <summary>
        /// Returns @(model.DtoName)
        /// </summary>
        [HttpGet("list")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<GenericListResult<@(model.BaseViewModel.FullName), @(model.DtoName)>> List(
            string includes = null,
            string orderBy = null, string orderByDescending = null,
            int? page = null, int? pageSize = null,
            string where = null,
            string listDataSource = null,
            string search = null,
            // Custom fields for this object.
            @(string.Join(",",model.BaseViewModel.Properties.Where(f=>f.IsUrlParameter).Select(f=>$"string {f.UrlParameterName} = null"))))
        {
            @*if (!Model.SecurityInfo.IsReadAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return new GenericListResult<@(model.BaseViewModel.Name), @(model.DtoName)>(new ListResult { WasSuccessful = false, Message = "Read not allowed on @(model.Name) objects." });
            }*@

            ListParameters parameters = new ListParameters(null, includes, orderBy, orderByDescending, page, pageSize, where, listDataSource, search);

            // Add custom filters
            @foreach (PropertyViewModel prop in model.BaseViewModel.Properties.Where(f => f.IsUrlParameter))
            {
            @:parameters.AddFilter("@prop.Name", @prop.UrlParameterName);
            }

            var listResult = await ListImplementation(parameters);
            return new GenericListResult<@(model.BaseViewModel.FullName), @(model.DtoName)>(listResult);
        }

        /// <summary>
        /// Returns custom object based on supplied fields
        /// </summary>
        [HttpGet("customlist")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<ListResult> CustomList(
            string fields = null,
            string includes = null,
            string orderBy = null, string orderByDescending = null,
            int? page = null, int? pageSize = null,
            string where = null,
            string listDataSource = null,
            string search = null,
            // Custom fields for this object.
            @(string.Join(",",model.Properties.Where(f=>f.IsUrlParameter).Select(f=>$"string {f.UrlParameterName} = null"))))
        {
            @*if (!Model.SecurityInfo.IsReadAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return new ListResult { WasSuccessful = false, Message = "Read not allowed on @(model.Name) objects." };
            }*@

            ListParameters parameters = new ListParameters(fields, includes, orderBy, orderByDescending, page, pageSize, where, listDataSource, search);

            // Add custom filters
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsUrlParameter))
            {
            @:parameters.AddFilter("@prop.Name", @prop.UrlParameterName);
            }

            return await ListImplementation(parameters);
        }

        [HttpGet("count")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<int> Count(
            string where = null,
            string listDataSource = null,
            string search = null,
            // Custom fields for this object.
            @(string.Join(",",model.Properties.Where(f=>f.IsUrlParameter).Select(f=>$"string {f.UrlParameterName} = null"))))
        {
            @*if (!Model.SecurityInfo.IsReadAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return 0;
            }*@

            ListParameters parameters = new ListParameters(where: where, listDataSource: listDataSource, search: search, fields: null);

            // Add custom filters
            @foreach(PropertyViewModel prop in model.Properties.Where(f=>f.IsUrlParameter))
            {
            @:parameters.AddFilter("@prop.Name", @prop.UrlParameterName);
            }

            return await CountImplementation(parameters);
        }

        [HttpGet("propertyValues")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual IEnumerable<string> PropertyValues(string property, int page = 1, string search = "")
        {
            @*if (!Model.SecurityInfo.IsReadAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return null;
            }*@

            return PropertyValuesImplementation(property, page, search);
        }

        [HttpGet("get/{id}")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<@(model.DtoName)> Get(string id, string includes = null, string dataSource = null)
        {
            @*if (!Model.SecurityInfo.IsReadAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return null;
            }*@

            ListParameters listParams = new ListParameters(includes: includes, listDataSource: dataSource);
            listParams.AddFilter("id", id);
            return await GetImplementation(id, listParams);
        }
        </text>
        }


        @if (securityInfo.IsDeleteAllowed()) {
        <text>
        [HttpPost("delete/{id}")]
        @(securityInfo.DeleteAnnotation)
        @(model.ApiActionAccessModifier) virtual bool Delete(string id)
        {
            @*if (!Model.SecurityInfo.IsDeleteAllowed(User))
            {
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return false;
            }*@

            return DeleteImplementation(id);
        }
        </text>
        }

        @if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed()) {
        <text>
        [HttpPost("save")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<SaveResult<@(model.DtoName)>> Save(@(model.DtoName) dto, string includes = null, string dataSource = null, bool returnObject = true)
        {

            @(createIf)
                var result = new SaveResult<@(model.DtoName)>();
                result.WasSuccessful = false;
                result.Message = "Create not allowed on @(model.Name) objects.";
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return result;
            }
            @(editElseIf)
                var result = new SaveResult<@(model.DtoName)>();
                result.WasSuccessful = false;
                result.Message = "Edit not allowed on @(model.Name) objects.";
                Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                return result;
            }

            return await SaveImplementation(dto, includes, dataSource, returnObject);
        }

        [HttpPost("AddToCollection")]
        @(securityInfo.EditAnnotation)
        @(model.ApiActionAccessModifier) virtual SaveResult<@(model.DtoName)> AddToCollection(int id, string propertyName, int childId)
        {
            return ChangeCollection(id, propertyName, childId, "Add");
        }
        [HttpPost("RemoveFromCollection")]
        @(securityInfo.EditAnnotation)
        @(model.ApiActionAccessModifier) virtual SaveResult<@(model.DtoName)> RemoveFromCollection(int id, string propertyName, int childId)
        {
            return ChangeCollection(id, propertyName, childId, "Remove");
        }
        </text>
        }

        /// <summary>
        /// Downloads CSV of @(model.DtoName)
        /// </summary>
        [HttpGet("csvDownload")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<FileResult> CsvDownload(
            string orderBy = null, string orderByDescending = null,
            int? page = 1, int? pageSize = 10000,
            string where = null,
            string listDataSource = null,
            string search = null,
            // Custom fields for this object.
            @(string.Join(",",model.BaseViewModel.Properties.Where(f=>f.IsUrlParameter).Select(f=>$"string {f.UrlParameterName} = null"))))
        {
            ListParameters parameters = new ListParameters(null, "none", orderBy, orderByDescending, page, pageSize, where, listDataSource, search);

            // Add custom filters
            @foreach (PropertyViewModel prop in model.BaseViewModel.Properties.Where(f => f.IsUrlParameter))
            {
            @:parameters.AddFilter("@prop.Name", @prop.UrlParameterName);
            }

            var listResult = await ListImplementation(parameters);
            var list = listResult.List.Cast<@(model.DtoName)>();
            var csv = IntelliTect.Coalesce.Helpers.CsvHelper.CreateCsv(list);

            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(csv);
            return File(bytes, "application/x-msdownload", "@(model.BaseViewModel.Name).csv");
        }

        /// <summary>
        /// Returns CSV text of @(model.DtoName)
        /// </summary>
        [HttpGet("csvText")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<string> CsvText(
            string orderBy = null, string orderByDescending = null,
            int? page = 1, int? pageSize = 10000,
            string where = null,
            string listDataSource = null,
            string search = null,
            // Custom fields for this object.
            @(string.Join(",",model.BaseViewModel.Properties.Where(f=>f.IsUrlParameter).Select(f=>$"string {f.UrlParameterName} = null"))))
        {
            ListParameters parameters = new ListParameters(null, "none", orderBy, orderByDescending, page, pageSize, where, listDataSource, search);

            // Add custom filters
            @foreach (PropertyViewModel prop in model.BaseViewModel.Properties.Where(f => f.IsUrlParameter))
            {
            @:parameters.AddFilter("@prop.Name", @prop.UrlParameterName);
            }

            var listResult = await ListImplementation(parameters);
            var list = listResult.List.Cast<@(model.DtoName)>();
            var csv = IntelliTect.Coalesce.Helpers.CsvHelper.CreateCsv(list);

            return csv;
        }

    
        @if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed())
        {
        <text>
        /// <summary>
        /// Saves CSV data as an uploaded file
        /// </summary>
        [HttpPost("CsvUpload")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<IEnumerable<SaveResult<@(model.DtoName)>>> CsvUpload(Microsoft.AspNetCore.Http.IFormFile file, bool hasHeader = true) 
        {
            if (file != null && file.Length > 0)
            {
                using (var stream = file.OpenReadStream())
                {
                    using (var reader = new System.IO.StreamReader(stream)) {
                        var csv = reader.ReadToEnd();
                        return await CsvSave(csv, hasHeader);
                    }
                }
            }
            throw new ArgumentException("No files uploaded");
        }

        /// <summary>
        /// Saves CSV data as a posted string
        /// </summary>
        [HttpPost("CsvSave")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual async Task<IEnumerable<SaveResult<@(model.DtoName)>>> CsvSave(string csv, bool hasHeader = true) 
        {
            // Get list from CSV
            var list = IntelliTect.Coalesce.Helpers.CsvHelper.ReadCsv<@(model.DtoName)>(csv, hasHeader);
            var resultList = new List<SaveResult<@(model.DtoName)>>();
            foreach (var dto in list){
                // Check if creates/edits aren't allowed
                @(createIf)
                    var result = new SaveResult<@(model.DtoName)>();
                    result.WasSuccessful = false;
                    result.Message = "Create not allowed on @(model.Name) objects.";
                    Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    resultList.Add(result);
                }
                @(editElseIf)
                    var result = new SaveResult<@(model.DtoName)>();
                    result.WasSuccessful = false;
                    result.Message = "Edit not allowed on @(model.Name) objects.";
                    Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    resultList.Add(result);
                }
                else {
                    var result = await SaveImplementation(dto, "none", null, false);
                    resultList.Add(result);
                }
            }
            return resultList;
        }
        </text>
        }

        protected override IQueryable<@(model.BaseViewModel.FullName)> GetListDataSource(ListParameters parameters)
        {
            @foreach (var method in model.Methods.Where(m => m.IsStatic && m.ReturnType.IsA<IQueryable>() && m.ReturnType.PureType.Name == model.Name && m.IsClientMethod))
            {
            @:if (parameters.ListDataSource == "@(method.Name)")
            @:{
            foreach (var parameter in method.Parameters.Where(p => !p.IsDI))
                {
            @:    @parameter.Type.Name @parameter.CsArgumentName = @parameter.Type.CsDefaultValue;
            @:    if (parameters.Filters.ContainsKey("@parameter.CsArgumentName"))
                @:{
                    @:@parameter.CsArgumentName = @(parameter.Type.CsConvertFromString)(parameters.Filters["@parameter.CsArgumentName"]);
                @:}
            @:    else if (parameters.Filters.ContainsKey("@parameter.PascalCaseName"))
                @:{
                    @:@parameter.CsArgumentName = @(parameter.Type.CsConvertFromString)(parameters.Filters["@parameter.PascalCaseName"]);
                @:}
            }
            @:    return @(method.Parent.Namespace).@(method.Parent.Name).@(method.Name)(@(method.CsArguments));
            @:}
            }

            return base.GetListDataSource(parameters);
        }

        // Methods from data class exposed through API Controller.
        @foreach (var method in model.Methods.Where(m=>m.IsClientMethod))
        {
        <text>
        /// <summary>
        /// Method: @method.Name
        /// </summary>
        [HttpPost("@(method.Name)")]
        @if (!string.IsNullOrEmpty(method.SecurityInfo.ExecuteAnnotation)) {
@:        @(method.SecurityInfo.ExecuteAnnotation)
        }
        @(model.ApiActionAccessModifier) virtual SaveResult<@method.ReturnTypeNameForApi> @method.Name (@method.CsParameters){
            @if (method.SecurityInfo.IsExecute) {
            @:if (!ClassViewModel.MethodByName("@method.Name").SecurityInfo.IsExecutable(User)) throw new Exception("Not authorized");
            }
            var result = new SaveResult<@method.ReturnTypeNameForApi>();
            try{
                @if (method.ReturnType.HasClassViewModel ||
                    (method.ReturnType.PureType.HasClassViewModel && method.ReturnType.IsCollection))
                {
                @:IncludeTree includeTree = null;
                }
                @if (method.IsStatic)
                {
                if(method.ReturnType.IsVoid){
                @:object objResult = null;
                @:@(method.Parent.Name).@(method.Name)(@(method.CsArguments));
                }else{
@:var objResult = @(method.Parent.FullName).@(method.Name)(@(method.CsArguments));
                }
                }
                else
                {
@:var item = DataSource.Includes().FindItem(id);
                if (method.ReturnType.IsVoid)
                {
                @:object objResult = null;
                @:item.@(method.Name)(@(method.CsArguments));
                }else{
                @:var objResult = item.@(method.Name)(@(method.CsArguments));
                }
                @:Db.SaveChanges();
                }
@if (method.ReturnType.HasClassViewModel && !method.ReturnType.IsCollection)
                {
                @:result.Object = Mapper<@(method.ReturnType.ClassViewModel.FullName), @(method.ReturnType.ClassViewModel.DtoName)>.ObjToDtoMapper(objResult, User, "", includeTree);
                }
                else if (method.ReturnType.PureType.HasClassViewModel && method.ReturnType.IsCollection)
                {
                @:result.Object = objResult.ToList().Select(o => Mapper<@(method.ReturnType.PureType.ClassViewModel.FullName), @(method.ReturnType.PureType.ClassViewModel.DtoName)>.ObjToDtoMapper(o, User, "", (objResult as IQueryable)?.GetIncludeTree() ?? includeTree)).ToList();
                }
                else
                {
                @:result.Object = objResult;
                }
                result.WasSuccessful = true;
                result.Message = null;
            }catch(Exception ex){
                result.WasSuccessful = false;
                result.Message = ex.Message;
            }
            return result;
        }
</text>
        }
    }
}
