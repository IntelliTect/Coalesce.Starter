@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@using Microsoft.VisualStudio.Web.CodeGeneration
@using IntelliTect.Coalesce.Utilities
@using IntelliTect.Coalesce.DataAnnotations
@using IntelliTect.Coalesce.Helpers
@{
    ContextInfo contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string listViewModelsNamespace = "ListViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        listViewModelsNamespace = Model.AreaName + "." + listViewModelsNamespace;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        listViewModelsNamespace = Model.ModulePrefix + "." + listViewModelsNamespace;
    }
}
@@using IntelliTect.Coalesce.Helpers
@@{ ViewBag.Fluid = true; }


<div style="padding: 10px 15px">
    <h1 style="display:inline-block">
        @(model.Name.ToProperCase()) List
        @{
            @:<span style="font-size: .5em; padding-left: 20px;"><a href="~/@(model.ControllerName)/Docs">API Docs</a></span>
        }
    </h1>
    <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>

    <div class="clearfix">
        <div style="display: inline-block; font-size: 1.1em; margin-right: 10px;">
            <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled() && !isLoading(), click: previousPage"></i>
            Page
            <input data-bind="value: page" style="width: 35px">
            of
            <span data-bind="text: pageCount"></span>
            <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled() && !isLoading(), click: nextPage"></i>
        </div>
        <select data-bind="value:pageSize" class="form-control" style="width: 100px; display: inline-block">
            <option value="1">1</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
            <option value="500">500</option>
            <option value="1000">1000</option>
        </select>

        <input class="form-control pull-right" style="width: 250px; margin-left: 20px" data-bind="textInput: search" placeholder="Search" />

        <div class="btn-group pull-right">
            @{
                if (model.SecurityInfo.IsCreateAllowed())
                {
                    @:<a href="~/@(model.ControllerName)/CreateEdit?@@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-plus"></i> Create</a>
                }
                <button data-bind="click:load" class="btn btn-sm btn-default "><i class="fa fa-refresh"></i> Refresh</button>
                @:@@if (ViewBag.Editable)
                @:{
                @:<a href="~/@(model.ControllerName)/Table?@@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-lock"></i> Make Read-only</a>
                @:}
                if (model.SecurityInfo.IsEditAllowed())
                {
                    @:else
                    @:{
                    @:<a href="~/@(model.ControllerName)/TableEdit?@@ViewBag.Query" role="button" class="btn btn-sm btn-default "><i class="fa fa-pencil"></i> Make Editable</a>
                    @:}
                }
            }
        </div>
    </div>
</div>
<hr />
<div class="card">
    <div class="card-body">
        @{
            @:<table class="table @@(ViewBag.Editable ? " editable" : "" )">
        }
        <thead>
            <tr>
                @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
                {
                    <th>@prop.DisplayName</th>
                }
                <th style="width: 1%">
                </th>
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: items -->
            <tr data-bind="css: {'btn-warning': errorMessage()}">
                @{
                    @:@@if (@@ViewBag.Editable)
                    @:{
                    @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
                        {
                    @:<td class="prop-@(prop.JsonName)">@Display.PropertyHelper(prop, !prop.IsReadOnly)</td>
                        }
                    @:}
                    @:else
                    @:{
                    @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
                        {
                    @:<td class="prop-@(prop.JsonName)">@Display.PropertyHelper(prop, false)</td>
                        }
                    @:}
                }
                <td>

                    <!-- Editor buttons -->
                    <div class="btn-group pull-right" role="group" style="display: inline-flex">
                        @if (model.Methods.Any(f => !f.IsHidden(HiddenAttribute.Areas.List) && f.IsClientMethod && !f.IsStatic))
                            {
                        <!-- Action buttons -->
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Actions <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (var method in model.Methods.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && f.IsClientMethod && !f.IsStatic))
                                        {
                                        <li>@Display.MethodHelper(method)</li>
                                        }
                                </ul>
                            </div>
                            }
                        @if (model.SecurityInfo.IsEditAllowed())
                            {
                            <a data-bind="attr:{ href: editUrl }" class="btn btn-sm btn-default">
                                <i class="fa fa-pencil"></i>
                            </a>
                            }
                        @if (model.SecurityInfo.IsDeleteAllowed())
                            {
                            <button data-bind="click: deleteItemWithConfirmation" class="btn btn-sm btn-danger">
                                <i class="fa fa-remove"></i>
                            </button>
                            }

                    </div>
                    <div class="form-control-static" data-bind="text: errorMessage"></div>
                </td>
            </tr>
            <!-- /ko -->
        </tbody>
    </table>
</div>
</div>



@if (model.Methods.Any(f => f.IsStatic && f.IsClientMethod))
{
    <div class="card">
        <div class="card-heading">
            <h3 class="card-title">Actions</h3>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th style="width: 20%;">Action</th>
                        <th style="width: 50%;">Result</th>
                        <th style="width: 20%;">Successful</th>
                        <th style="width: 10%;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (MethodViewModel method in model.Methods.Where(f => f.IsStatic && f.IsClientMethod))
                    {
                        <tr>
                            <td>
                                <button class="btn btn-default btn-xs" data-bind="click: @method.JsVariableModal">@method.DisplayName</button>
                            </td>
                            <td>
                                @if (method.ReturnType.IsCollection)
                                {
                                    <ul data-bind="foreach: @method.JsVariableResult">
                                        <li class="" data-bind="text: $data"></li>
                                    </ul>
                                }
                                else if (method.ReturnType.HasClassViewModel)
                                {
                                    <dl class="dl-horizontal" data-bind="with: @method.JsVariableResult">
                                        @foreach (var prop in method.ReturnType.ClassViewModel.Properties.Where(f => f.HasViewModelProperty && !f.IsHidden(HiddenAttribute.Areas.Edit)))
                                        {
                                            <dt>@prop.DisplayName</dt>
                                            <dd data-bind="text: @prop.JsVariableForBinding"></dd>
                                        }
                                    </dl>
                                }
                                else
                                {
                                <span class="" data-bind="text: @method.JsVariableResult"></span>
                                }
                            </td>
                            <td>
                                <span class="" data-bind="text: @method.JsVariableWasSuccessful"></span>
                                <span class="" data-bind="text: @method.JsVariableMessage"></span>
                            </td>
                            <td>
                                <span class="label label-info" data-bind="fadeVisible: @(method.JsVariableIsLoading)()">Loading</span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@foreach (var method in model.Methods.Where(f => f.IsStatic && f.ClientParameters.Any() && f.IsClientMethod))
{
    <!-- Modal for method: @method.Name -->
    <div @($"id='method-{method.Name}'") class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">@method.Name.ToProperCase()</h4>
                </div>
                <div class="modal-body form-horizontal" data-bind="with: @(method.JsVariableArgs)">
                    @foreach (ParameterViewModel arg in method.ClientParameters)
                    {
                        <div class="form-group">
                            <label class="col-md-4 control-label">@arg.Name.ToProperCase()</label>
                            <div class="col-md-8">
                                <input type="text" class="form-control" data-bind="value: @(arg.CsArgumentName)">
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary btn-ok">OK</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->


}

@{
    @:@@section Scripts
    @:{
        @ScriptHelper.StandardBinding(model)
    @:}
}