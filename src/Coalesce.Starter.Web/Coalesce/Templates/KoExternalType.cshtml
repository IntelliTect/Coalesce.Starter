@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@{
    ClassViewModel model = Model.Model;
    string moduleName = "ViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        moduleName = Model.AreaName + "." + moduleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
}

/// <reference path="../coalesce.dependencies.d.ts" />

module @moduleName {
    // *** External Type @(model.Name)
    export class @(model.ViewModelGeneratedClassName)
    {
        @if (model.PrimaryKey != null)
        {
        // ID of the object.
        @:public myId: any = 0;
        }

        // Observables
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasViewModelProperty))
        {
		@:public @(prop.JsVariable): @(prop.Type.TsKnockoutType) = @(prop.Type.JsKnockoutType);
        if (prop.Type.IsEnum)
        { 
        @:public @(prop.JsTextPropertyName) = @(prop.Type.JsKnockoutType);  // Enum Text Value
        }
        }
        // Loads this object from a data transfer object received from the server.
        public loadFromDto: (data: any) => void;
        public parent: any;


        constructor(newItem?: any, parent?: any){
            var self = this;
            self.parent = parent;
            // Load the object
			self.loadFromDto = function(data: any) {
				if (!data) return;
            @if (model.PrimaryKey != null)
            {
                @:// Set the ID
                @:self.myId = data.@(model.PrimaryKey.JsonName);
            }

                // Load the properties.
        @foreach (PropertyViewModel prop in model.Properties.Where(p => !p.IsInternalUse))
        {
            if (prop.Type.IsCollection && prop.Type.ClassViewModel != null)
            {
                @:if (data.@prop.JsonName != null) {
                @:// Merge the incoming array
                @if (prop.Type.PureType.ClassViewModel.PrimaryKey != null)
                {
                    @:Coalesce.KnockoutUtilities.RebuildArray(self.@(prop.JsVariable), data.@prop.JsonName, '@prop.Type.PureType.ClassViewModel.PrimaryKey.JsVariable', ViewModels.@prop.Type.PureType.ClassViewModel.Name, self, true);
                }
                else
                {
                    @:Coalesce.KnockoutUtilities.RebuildArray(self.@(prop.JsVariable), data.@prop.JsonName, null, ViewModels.@prop.Type.PureType.ClassViewModel.Name, self, true);
                }
                @:}

            }
            else if (prop.Type.IsDate)
            {
                @:if (data.@prop.JsVariable == null) self.@(prop.JsVariable)(null);
                @:else if (self.@(prop.JsVariable)() == null || !self.@(prop.JsVariable)().isSame(moment(data.@prop.JsVariable))){
                @:self.@(prop.JsVariable)(moment(data.@prop.JsVariable));
                @:}
            }
            else if (prop.IsPOCO)
            {
                @:if (!self.@(prop.JsVariable)()){
                    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(data.@prop.JsonName, self));
                @:}else{
                    @:self.@(prop.JsVariable)().loadFromDto(data.@prop.JsonName);
                @:}
            }
            else
            {
                @:self.@(prop.JsVariable)(data.@prop.JsVariable);
            }
        }
                
            };

            if (newItem) {
                self.loadFromDto(newItem);
            }
        }
    }
}
