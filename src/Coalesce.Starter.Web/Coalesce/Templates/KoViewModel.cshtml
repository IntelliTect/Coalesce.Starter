@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@{
    ClassViewModel model = Model.Model;
    string typingReferencePath = "../..";
    string intellitectUtilitiesPath = "..";
    string moduleName = "ViewModels";
    string listModuleName = "ListViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        typingReferencePath = "../../../..";
        intellitectUtilitiesPath = "../../../../scripts";
        moduleName = Model.AreaName + "." + moduleName;
        listModuleName = Model.AreaName + "." + listModuleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
}
@{ 
@:/// <reference path="@typingReferencePath/typings/tsd.d.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.utilities.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.ko.utilities.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.ko.base.ts" />
}



// Knockout View Model for: @(model.Name)
// Auto Generated Knockout Object Bindings
// Copyright IntelliTect, @(DateTime.Now.Year)

var baseUrl = baseUrl || '';
var saveTimeoutInMs = saveTimeoutInMs || 500;

module @moduleName {

	export class @(model.ViewModelGeneratedClassName) extends BaseViewModel<@(model.ViewModelClassName)>
    {
        protected modelName = "@(model.Name)";
        protected modelDisplayName = "@(model.DisplayName)";
        protected areaUrl = ((@string.IsNullOrWhiteSpace(Model.AreaName).ToString().ToLower()) ? baseUrl : baseUrl + '@Model.AreaName/');
        protected primaryKeyName = "@(model.PrimaryKey.JsVariable)";
        protected apiUrlBase = "@(model.ApiUrl)";
        protected viewUrlBase = "@(model.ControllerName)";
        public dataSources = ListViewModels.@(model.Name)DataSources;


        // The custom code to run in order to pull the initial datasource to use for the object that should be returned
        public dataSource: ListViewModels.@(model.Name)DataSources = ListViewModels.@(model.Name)DataSources.Default;
        
    
        // Observables
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasViewModelProperty))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.JsVariable): @(prop.Type.TsKnockoutType) = @(prop.Type.JsKnockoutType);
        if (prop.Type.IsEnum || (prop.Type.IsNullable && prop.PureType.IsEnum))
        {
        @:// Text value for enumeration @prop.Name
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.JsTextPropertyName): KnockoutComputed<string> = ko.computed<string>(() => "");
        }
        if (prop.IsManytoManyCollection)
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ManyToManyCollectionName.ToCamelCase()): KnockoutObservableArray<ViewModels.@(prop.ManyToManyCollectionProperty.Object.ViewModelClassName)> = ko.observableArray([]);  // Many to Many Collection
        }
        }

       
        // Create computeds for display for objects
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsInternalUse))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @prop.JsTextPropertyName: () => string;
        }
        
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
        {
        if (prop.Comment.Length > 0)
        {
        @:// Add object to @(prop.JsVariable)
        }
        @:public addTo@(prop.Name): (autoSave?: boolean) => @prop.PureType.ClassViewModel.Name;
        @:// List Object model for @(prop.Name). Allows for loading subsets of data.
        @:public @(prop.JsVariable)List: (loadImmediate?: boolean) => @(listModuleName).@(prop.Object.ListViewModelClassName);
        }

        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && !f.IsInternalUse && f.PureTypeOnContext))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ListEditorUrlName): () => void; 
        }
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ValidValueListName.ToCamelCase()): KnockoutObservableArray<any> = ko.observableArray([]);
        @:public load@(prop.ValidValueListName): (callback?: any) => void;
        }
        // Pops up a stock editor for this object.
        public showEditor: (callback?: any) => void;
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsInternalUse))
        {
        @:public show@(prop.Name)Editor: (callback?: any) => void;
        }


        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:public @(prop.JsVariable)Values: EnumValue[] = [ 
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:{ id: @kvp.Key, value: '@kvp.Value.ToProperCase()' },
        }
        @:];
        }

        @foreach(var method in model.Methods.Where(m => m.IsClientMethod && (!m.IsStatic || m.ReturnType.Name == model.Name)))
        {
        @:// Call server method (@method.Name)
        if (method.Comment.Length > 0)
        {
        @:// @(method.Comment)
        }
        @:public @method.JsVariable: (@method.TsParameters) => void;
        @:// Result of server method (@method.Name)
        @:public @method.JsVariableResult: @method.ReturnType.TsKnockoutType = @method.ReturnType.JsKnockoutType;
        @:// True while the server method (@method.Name) is being called
        @:public @method.JsVariableIsLoading: KnockoutObservable<boolean> = ko.observable(false);
        @:// Error message for server method (@method.Name) if it fails.
        @:public @method.JsVariableMessage: KnockoutObservable<string> = ko.observable(null);
        @:// True if the server method (@method.Name) was successful.
        @:public @method.JsVariableWasSuccessful: KnockoutObservable<boolean> = ko.observable(null);
        @:// Presents a series of input boxes to call the server method (@method.Name)
        @:public @method.JsVariableUi: (callback?: any, reload?: boolean) => void;
        @:// Presents a modal with input boxes to call the server method (@method.Name)
        @:public @method.JsVariableModal: (callback?: any, reload?: boolean) => void;
        @:// Variable for method arguments to allow for easy binding
        @if (method.ClientParameters.Any())
        {
        @:public @method.JsVariableWithArgs: (args?: @(model.ViewModelGeneratedClassName).@(method.ArgsName), callback?: any, reload?: boolean) => void;
        @:// Object that can be easily bound to fields to allow data entry for the method
        @:public @(method.JsVariableArgs) = new @(model.ViewModelGeneratedClassName).@(method.ArgsName)(); 
        }
        @:
        }
        
        public originalData: KnockoutObservable<any> = ko.observable(null);
        
        // This method gets called during the constructor. This allows injecting new methods into the class that use the self variable.
        public init(myself: @(model.ViewModelGeneratedClassName)) {};

        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            // Call an init function that allows for proper inheritance.
            if ($.isFunction(self.init)){
                self.init(self);
            }
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty))
            {
                var validationProperties = prop.ClientValidationKnockoutJs;
                if (validationProperties != string.Empty || prop.Type.IsDate)
                {
			@:self.@prop.JsVariable = self.@(prop.JsVariable).extend({ @(prop.Type.IsDate ? "moment: { unix: true }, " : "")@prop.ClientValidationKnockoutJs });
                }
            }
            
            self.errors = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && !p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);
            self.warnings = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.areaUrl + self.viewUrlBase + "/CreateEdit?id=" + self.@(model.PrimaryKey.JsVariable)();
            });

            // Create computeds for display for objects
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsComplexType && !f.IsInternalUse))
            {
			@:self.@prop.JsTextPropertyName = ko.computed(function()
			@:{   // If the object exists, use the text value. Otherwise show 'None'
				@:if (self.@(prop.JsVariable)() && self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)()) {
					@:return self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)().toString();
				@:} else {
					@:return "None";
				@:}
			@:});
            }


            // Load the ViewModel object from the DTO. 
            // Force: Will override the check against isLoading that is done to prevent recursion. False is default.
            // AllowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
			self.loadFromDto = function(data: any, force: boolean = false, allowCollectionDeletes: boolean = true) {
				if (!data || (!force && self.isLoading())) return;
				self.isLoading(true);
				// Set the ID 
				self.myId = data.@(model.PrimaryKey.JsonName);
				// Load the lists of other objects
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.Type.IsCollection && p.HasViewModel))
            { 
                @:if (data.@prop.JsonName != null) {
                @if (prop.Object.PrimaryKey != null)
                {
				    @:// Merge the incoming array
				    @:RebuildArray(self.@prop.JsVariable, data.@prop.JsonName, '@prop.Object.PrimaryKey.JsonName', @prop.Object.ViewModelClassName, self, allowCollectionDeletes);
                    if (prop.IsManytoManyCollection)
                    {
                    @:// Add many-to-many collection
                    @:var objs = [];
                    @:$.each(data.@prop.JsonName, function(index, item) {
                        @:if (item.@prop.ManyToManyCollectionProperty.JsonName){
                            @:objs.push(item.@prop.ManyToManyCollectionProperty.JsonName);
                        @:}
                    @:});
				    @:RebuildArray(self.@(prop.ManyToManyCollectionName.ToCamelCase()), objs, '@prop.ManyToManyCollectionProperty.ObjectIdProperty.JsVariable', @prop.ManyToManyCollectionProperty.Object.ViewModelClassName, self, allowCollectionDeletes);
                    }
                }
                else if (prop.PureType.IsPrimitive)
                {
                    @:self.@(prop.JsVariable)(data.@prop.JsVariable);
                }
                else
                {
                    @:RebuildArray(self.@prop.JsVariable, data.@prop.JsonName, null, @prop.Object.ViewModelClassName, self, allowCollectionDeletes);
                }
				@:} 
            }
				// Objects are loaded first so that they are available when the IDs get loaded.
				// This handles the issue with populating select lists with correct data because we now have the object.
                @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && p.IsPOCO && !p.Type.IsCollection && !p.IsComplexType && !p.IsInternalUse))
	            {
				@:if (!data.@prop.JsonName) { 
                    if (prop.ObjectIdProperty != null) {
					@:if (data.@prop.ObjectIdProperty.JsonName != self.@(prop.ObjectIdProperty.JsVariable)()) {
                        @:self.@(prop.JsVariable)(null);
                    @:}
                    }else{
					@:self.@(prop.JsVariable)(null);
                    }
                @:}else {
                    @:if (!self.@(prop.JsVariable)()){
					    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(data.@prop.JsonName, self));
				    @:}else{
					    @:self.@(prop.JsVariable)().loadFromDto(data.@prop.JsonName);
				    @:}
                    @if (prop.Object.OnContext) { 
                    @:if (self.parent && self.parent.myId == self.@(prop.JsVariable)().myId && intellitect.utilities.getClassName(self.parent) == intellitect.utilities.getClassName(self.@(prop.JsVariable)()))
                    @:{
                        @:self.parent.loadFromDto(data.@prop.JsonName, undefined, false);
                    @:}
                    }
                @:}
                }

				// The rest of the objects are loaded now.
                @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                {
                if (prop.Type.IsDate)
                { 
                @:if (data.@prop.JsonName == null) self.@(prop.JsVariable)(null);
				@:else if (self.@(prop.JsVariable)() == null || !self.@(prop.JsVariable)().isSame(moment(data.@prop.JsonName))){
				    @:self.@(prop.JsVariable)(moment(data.@prop.JsonName));
				@:}
                } else if (!prop.IsPOCO) {
				@:self.@(prop.JsVariable)(data.@prop.JsonName);
                }else if (prop.IsComplexType) {
                // Complex Type: @prop.JsonName
                @foreach (PropertyViewModel subProp in prop.Object.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                {
				@:self.@(prop.JsVariable)().@(subProp.JsVariable)(data.@(prop.JsonName).@(subProp.JsonName));
                }
            }
         }
                if (self.afterLoadFromDto){
                    self.afterLoadFromDto();
                }
				self.isLoading(false);
				self.isDirty(false);
                self.validate();
			};

    	    // Save the object into a DTO
			self.saveToDto = function() {
				var dto: any = {};
				dto.@(model.Properties.First(f=>f.IsPrimaryKey).JsonName) = self.@(model.Properties.First(f=>f.IsPrimaryKey).JsVariable)();

                @foreach (PropertyViewModel prop in model.Properties.Where(f => f.CanWrite && !f.IsPOCO && !f.HasReadOnlyAttribute && !f.HasReadOnlyApiAttribute && f.HasViewModelProperty || f.IsComplexType))
                {
                if (prop.Type.IsDateTimeOffset)
                {
				@:if (!self.@(prop.JsVariable)()) dto.@prop.Name = null;
				@:else dto.@prop.JsonName = self.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ssZZ');
                }
                else if (prop.Type.IsDateTime)
                { 
                @:if (!self.@(prop.JsVariable)()) dto.@prop.Name = null;
				@:else dto.@prop.JsonName = self.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ss');
                }
                else if (prop.IsComplexType) 
                {
                @:// Complex Type: @prop.Name>
				@:dto.@(prop.JsonName)={};
                    foreach (PropertyViewModel subProp in prop.Object.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                    {
				@:dto.@(prop.JsonName).@(subProp.JsonName) = self.@(prop.JsVariable)().@(subProp.JsVariable)();
                    }
                }
                else if (prop.IsForeignKey)
                {
				@:dto.@prop.JsonName = self.@(prop.JsVariable)();
                    if (prop.IdPropertyObjectProperty != null && !prop.IsPrimaryKey)
                    {
				// If the Id isn't set, use the object and see if that is set. Allows a child to get an Id after the fact. 
				@:if (!dto.@prop.JsonName && self.@(prop.IdPropertyObjectProperty.JsVariable)()) {
				    @:dto.@prop.JsonName = self.@(prop.IdPropertyObjectProperty.JsVariable)().@(prop.IdPropertyObjectProperty.Object.PrimaryKey.JsVariable)();
				@:}
                }
                }
                else if (!prop.Type.IsCollection)
                {
    	        @:dto.@prop.JsonName = self.@(prop.JsVariable)();
                }
                }

				return dto;
			}

            // Methods to add to child collections
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
            <text>
            self.addTo@(prop.Name) = function(autoSave = true) {
                var newItem = new @(prop.Object.ViewModelClassName)();
                if (typeof(autoSave) == 'boolean'){
                    newItem.isSavingAutomatically = autoSave;
                }
                newItem.parent = self;
                newItem.parentCollection = self.@prop.JsVariable;
                newItem.isExpanded(true);
                @if (prop.HasInverseProperty)
                {
                @:newItem.@(prop.InverseIdProperty.JsVariable)(self.@(model.PrimaryKey.JsVariable)());
                }
                else if (prop.Object.PropertyByName(model.PrimaryKey.JsVariable) != null)
                {
                @:newItem.@(model.PrimaryKey.JsVariable)(self.@(model.PrimaryKey.JsVariable)());
                }
                self.@(prop.JsVariable).push(newItem);
                return newItem;
            }
            </text>
            }

            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
            @:// List Object model for @(prop.Name). Allows for loading subsets of data.
            @:var _@(prop.JsVariable)List: @(listModuleName).@(prop.Object.ListViewModelClassName) = null;
            @:self.@(prop.JsVariable)List = function(loadImmediate = true) {
                @:if (!_@(prop.JsVariable)List){
                    @:_@(prop.JsVariable)List = new @(listModuleName).@(prop.Object.ListViewModelClassName)();
                    @:if (loadImmediate) load@(prop.Name)List();
                    @:self.@(prop.Parent.PrimaryKey.JsVariable).subscribe(load@(prop.Name)List)
                @:}
                @:return _@(prop.JsVariable)List;
            @:}

            @:function load@(prop.Name)List() {
                @:if (self.@(prop.Parent.PrimaryKey.JsVariable)()){
                    if (prop.InverseIdProperty != null)
                    {
                    @:_@(prop.JsVariable)List.queryString = "@(prop.InverseIdProperty.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    else {
                    @:_@(prop.JsVariable)List.queryString = "@(model.PrimaryKey.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    @:_@(prop.JsVariable)List.load();
                @:}
            @:}
            }

            // Save on changes
            function setupSubscriptions() {
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanWrite && !p.IsManytoManyCollection && !p.Type.IsCollection && p.HasViewModelProperty))
            {
                @:self.@(prop.JsVariable).subscribe(self.autoSave);
            }
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.IsManytoManyCollection && !p.IsInternalUse))
            {
                @:self.@(prop.ManyToManyCollectionName.ToCamelCase()).subscribe(function(changes){
                    @:if (!self.isLoading() && changes.length > 0){
                        @:for (var i in changes){
                            @:var change:any = changes[i];
                            @:self.autoSaveCollection('@(prop.ManyToManyCollectionName.ToCamelCase())', change.value.@(prop.ManyToManyCollectionProperty.Object.PrimaryKey.JsVariable)(), change.status);
                        @:}
                    @:}
                @:}, null, "arrayChange");
            }
}  

            // Create variables for ListEditorApiUrls
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && !f.IsManytoManyCollection && !f.IsInternalUse && f.PureTypeOnContext))
            {
            @:self.@prop.ListEditorUrlName = ko.computed({
                @:read: function() {
                    if (prop.ListEditorUrl == null)
                    {
                        @:return "Inverse property not set on @(model.Name) for property @(prop.Name)";
                    }
                    else
                    {
                        @: return self.areaUrl + '@(prop.ListEditorUrl)' + self.@(model.PrimaryKey.JsVariable)();
                    }
                @:},
                @:deferEvaluation: true
            @:});
            }
            // Create loading function for Valid Values
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
            {
            <text>
            self.load@(prop.ValidValueListName) = function(callback) {
                self.loadingValidValues++;
                $.ajax({ method: "GET", url: self.areaUrl + "@(prop.Object.ApiUrl)/CustomList?Fields=@(prop.Object.PrimaryKey.Name),@(prop.Object.ListTextProperty.Name)", xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isLoading(true);
                    self.@(prop.ValidValueListName.ToCamelCase())(data.list);
                    self.isLoading(false);
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.isLoading(false);

                    if (self.showFailureAlerts)
                        alert("Could not get Valid Values for @(prop.Name): " + errorMsg);
                })
                .always(function(){
                    self.loadingValidValues--;
                    if (self.loadingValidValues === 0) {
                        if ($.isFunction(callback)) {callback();}
                    }
                });
            }
            </text>
            }

            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && f.HasViewModel && f.PureType.ClassViewModel.HasDbSet && !f.IsInternalUse))
            {
            @:self.show@(prop.Name)Editor = function(callback: any) {
                @:if (!self.@(prop.JsVariable)()) {
                    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)());
                @:}
                @:self.@(prop.JsVariable)().showEditor(callback)
            @:};
            }

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && !f.IsInternalUse && !f.IsReadOnly))
            {
                @:// See if self.@(prop.JsVariable) needs to be loaded.
                @:if (self.@(prop.JsVariable)() == null && self.@(prop.ObjectIdProperty.JsVariable)() != null){
                    @:loadingCount++;
                    @:var @(prop.JsVariable)Obj = new @(prop.Object.ViewModelClassName)();
                    @:@(prop.JsVariable)Obj.load(self.@(prop.ObjectIdProperty.JsVariable)(), function() {
                        @:loadingCount--;
                        @:self.@(prop.JsVariable)(@(prop.JsVariable)Obj);
                        @:if (loadingCount == 0 && $.isFunction(callback)){
                            @:callback();
                        @:}
                    @:});
                @:}
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };



            // Load all the valid values in parallel.
            self.loadValidValues = function(callback) {
                @if (model.Properties.Any(f => f.HasValidValues && !f.IsInternalUse))
                {
                @:self.loadingValidValues = 0;
                foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
                {
                @:self.load@(prop.ValidValueListName)(callback);
                }
                }
                else
                {
                @:if ($.isFunction(callback)) callback();
                }
            };

            // Enumeration Lookups.
            @foreach (PropertyViewModel prop in model.Properties.Where(f => (f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)) && !f.IsInternalUse))
            {
            @:self.@(prop.JsTextPropertyName) = ko.computed(function() {
                @:for(var i=0;i < self.@(prop.JsVariable)Values.length; i++){
                    @:if (self.@(prop.JsVariable)Values[i].id == self.@(prop.JsVariable)()){
                        @:return self.@(prop.JsVariable)Values[i].value;
                    @:}
                @:}
            @:});
            }


            // Method Implementations
            @foreach (var method in model.Methods.Where(m => m.IsClientMethod && (!m.IsStatic || m.ReturnType.Name == model.Name)))
            {
            <text>
            self.@method.JsVariable = function(@method.TsParameters.Replace("reload?: boolean", "reload: boolean = true")){
                self.@(method.JsVariableIsLoading)(true);
                $.ajax({ method: "POST",
                         url: self.areaUrl + "@(method.ApiUrl)",
                         data: @method.JsPostObject,
                         xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isDirty(false);
                    self.@(method.JsVariableMessage)('');
                    self.@(method.JsVariableWasSuccessful)(true);
                @if (method.ReturnType.IsCollection && method.ReturnType.PureType.HasClassViewModel)
                {
                    @:if (self.@(method.JsVariableResult)()){
   					// Merge the incoming array
                        @if (method.ReturnType.PureType.ClassViewModel.PrimaryKey != null)
                        {
                            @:RebuildArray(self.@(method.JsVariableResult), data.object, '@method.ReturnType.PureType.ClassViewModel.PrimaryKey.JsVariable', ViewModels.@method.ReturnType.PureType.ClassViewModel.Name, self, true);
                        }
                        else if (method.ReturnType.PureType.IsPrimitive)
                        {
                            @:self.@(method.JsVariableResult)(data.object);
                        }
                        else
                        {
                            @:RebuildArray(self.@(method.JsVariableResult), data.object, null, ViewModels.@method.ReturnType.PureType.ClassViewModel.Name, self, true);
                        }
                    @:}
                }
                else if (method.ReturnType.IsPOCO && method.ReturnType.HasClassViewModel)
                {
                    @:if (!self.@(method.JsVariableResult)()){
                        @:self.@(method.JsVariableResult)(new @(method.ReturnType.ClassViewModel.ViewModelClassName)(data.object));
                    @:}else{
                        @:self.@(method.JsVariableResult)().loadFromDto(data.object);
                    @:}
                }
                else
                {
                    @:self.@(method.JsVariableResult)(data.object);
                }

                    @if (method.ReturnType.Name == method.Parent.Name)
                    {
                    @:// The return type is the type of the object, load it.
                    @:self.loadFromDto(data.object, true)
                    @:if ($.isFunction(callback)) {
                        @:callback();
                    @:}
                    }
                    else
                    {
                    @:if (reload) {
                    @:  self.reload(callback);
                    @:} else if ($.isFunction(callback)) {
                    @:  callback(data);
                    @:}
                    }
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.@(method.JsVariableWasSuccessful)(false);
                    self.@(method.JsVariableMessage)(errorMsg);

                    if (self.showFailureAlerts)
                        alert("Could not call method @method.JsVariable: " + errorMsg);
                })
                .always(function() {
                    self.@(method.JsVariableIsLoading)(false);
                });
            }
            </text>

            @:self.@method.JsVariableUi = function(callback?: any, reload: boolean = true) {
                @foreach (var param in method.ClientParameters.Where(f => f.ConvertsFromJsString))
                {
                @:var @param.Name: @param.Type.TsType = @param.Type.TsConvertFromString($"prompt('{param.Name.ToProperCase()}')");
                }
                @foreach(var param in method.ClientParameters.Where(f=>!f.ConvertsFromJsString))
                {
                @:var @param.Name: @param.Type.TsType = null;
                }
                @:self.@(method.JsVariable)(@(method.JsArguments("", true)), reload);
            @:}

            @:self.@method.JsVariableModal = function(callback?: any, reload: boolean = true) {
                @if (method.ClientParameters.Any()) {
                @:$('#method-@method.Name').modal();
                @:$('#method-@method.Name').on('shown.bs.modal', function() {
                    @:$('#method-@method.Name .btn-ok').unbind('click');
                    @:$('#method-@method.Name .btn-ok').click(function()
                    @:{
                        @:self.@(method.JsVariableWithArgs)(null, callback, reload);
                        @:$('#method-@method.Name').modal('hide');
                    @:});
                @:});
                }
                else
                {
                    @:self.@(method.JsVariableUi)(callback, reload);
                }
            @:}

            @if (method.ClientParameters.Any()) {
            @:self.@(method.JsVariableWithArgs) = function(args?: @(model.ViewModelGeneratedClassName).@(method.ArgsName), callback?: any, reload: boolean = true) {
                @:if (!args) args = self.@(method.JsVariableArgs);
                @:self.@(method.JsVariable)(@(method.JsArguments("args", true)), reload);
            @:}
            }
            }


            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables
            @foreach (PropertyViewModel prop in model.Properties.Where(f=>f.IsComplexType && !f.IsInternalUse))
            {
            @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(self));
            }

            // Make sure everything is defined before we call this.
            setupSubscriptions();

            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }



        }
    }





    export namespace @(model.ViewModelGeneratedClassName) {
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:export enum @(prop.Name)Enum {
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:@kvp.Value = @kvp.Key,
        }
        @:};
        }

        // Classes for use in method calls to support data binding for input for arguments
        @foreach(MethodViewModel method in model.Methods.Where(f => f.ClientParameters.Any() && (!f.IsStatic || f.ReturnType.Name == model.Name) && f.IsClientMethod)){
        @:export class @(method.ArgsName) {
            @foreach (var arg in method.ClientParameters)
            {
            @:public @(arg.CsArgumentName): @(arg.Type.TsKnockoutType) = @(arg.Type.JsKnockoutType);
            }
        @:}
        }
    }
}