@{
    Layout = "_Layout";
}
<style>
    .bold {
        font-weight:bold;
    }
    ul.attributeList {
        list-style: none;
    }
    ul.attributeList ul {
        list-style: none;
        padding-left: 20px;
    }
    .validValues {
        padding-left: 10px;
    }
</style>
<div class="container">
    <h2>Attributes</h2>
    <ul class="attributeList">
        <li>
            <div><span class="bold">CreateController</span>(bool view = True, bool api = True)</div>
            <div>Allows specifying the types of controllers to create. Not including will create all.</div>
        </li>
        <li>
            <div><span class="bold">DateType</span>(DateTypes dateType = DateTypes.DateTime)</div>
            <div>Allows specifying the type of date to contain.</div>
            <div class="validValues"><span class="bold">Valid Values:</span> DateTypes.DateTime, DateTypes.DateOnly</div>
        </li>
        <li>
            <div><span class="bold">DefaultOrderBy</span>(int fieldOrder = 0, OrderByDirections orderByDirection = OrderByDirections.Ascending)</div>
            <div>Allows specifying the default sort order for returns lists of this object type.</div>
            <div class="validValues"><span class="bold">Valid Values:</span> OrderByDirections.Ascending, OrderByDirections.Descending</div>
        </li>
        <li>
            <div><span class="bold">Edit</span>()</div>
            <div>The Class or Property is read/write for the users and groups and not accessible to others.</div>
        </li>
        <li>
            <div><span class="bold">FileDownload</span>()</div>
            <div>Specified that this property is a file download.</div>
        </li>
        <li>
            <div><span class="bold">Hidden</span>(Areas area = Areas.All)</div>
            <div>Allows this property to be hidden on the list or editor or both.</div>
            <div class="validValues"><span class="bold">Valid Values:</span> Areas.All, Areas.List, Areas.Edit</div>
        </li>
        <li>
            <div><span class="bold">InternalUse</span>()</div>
            <div>Properties marked internal use do not get updated via the API on save.</div>
        </li>
        <li>
            <div><span class="bold">ListGroup</span>(string group)</div>
            <div>Used to specify when two fields contain data that should be combined for string select lists.
    Field entries with the same group name will be combined into a select drop down list.</div>
        </li>
        <li>
            <div><span class="bold">ListText</span>()</div>
            <div>The property marked with the attribute will be shown in drop down lists.</div>
        </li>
        <li>
            <div><span class="bold">ManyToMany</span>(string collectionName)</div>
            <div>Identifies a property as a many to many relationship and creates a secondary property on the view model for 
    viewing the collection of target items directly.</div>
        </li>
        <li>
            <div><span class="bold">Read</span>()</div>
            <div>The Class or Property is read only for the users and groups and not accessible to others.</div>
        </li>
        <li>
            <div><span class="bold">Search</span>()</div>
            <div>All fields marked with this field will be searched when using the list search feature.</div>
        </li>
    </ul>
    <h2>Interfaces</h2>
    <ul class="attributeList">
        <li>
            <div><span class="bold">ICreated&lt;T, TKey&gt;</span></div>
            <ul>
                <li class="bold">Properties</li>
                <li>T CreatedBy</li>
                <li>TKey CreatedById</li>
                <li>DateTimeOffset CreatedOn</li>
                            </ul>
        </li>
        <li>
            <div><span class="bold">IIncludable&lt;T&gt;</span></div>
            <ul>
                                <li class="bold">Methods</li>
                <li>System.Linq.IQueryable&lt;T&gt; Include(System.Linq.IQueryable&lt;T&gt; entities, string include = null)</li>
            </ul>
        </li>
        <li>
            <div><span class="bold">IModified&lt;T, TKey&gt;</span></div>
            <ul>
                <li class="bold">Properties</li>
                <li>T ModifiedBy</li>
                <li>TKey ModifiedById</li>
                <li>DateTimeOffset ModifiedOn</li>
                            </ul>
        </li>
        <li>
            <div><span class="bold">IDeletable&lt;TContext&gt;</span></div>
            <ul>
                <li class="bold">Methods</li>
                <li>void BeforeDeleteCommit(TContext db)</li>
            </ul>
        </li>
    </ul>
    <h2>Base Controllers</h2>
    <ul class="attributeList">
            <li>
                <div><span class="bold">BaseApiController&lt;T, TContext&gt;</span></div>
                <ul>
                                        <li class="bold">Methods</li>
                        <li>void .ctor(TContext dataContext)</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">BaseApiController&lt;T, TDto, TContext&gt;</span></div>
                <ul>
                    <li class="bold">Properties</li>
                        <li>TimeZoneInfo CurrentTimeZone</li>
                        <li>String ApiName</li>
                        <li>PropertyViewModel PrimaryKey</li>
                        <li>DbSet DataSource</li>
                                        <li class="bold">Methods</li>
                        <li>void .ctor(TContext dataContext)</li>
                        <li>System.Threading.Tasks.Task&lt;IntelliTect.Coalesce.Models.ListResult&gt; ListImplementation()</li>
                        <li>System.Threading.Tasks.Task&lt;int&gt; CountImplementation()</li>
                        <li>System.Collections.Generic.IEnumerable&lt;string&gt; PropertyValuesImplementation(string property, int page = 1, string search = )</li>
                        <li>TDto GetImplementation(int id, string includes = null)</li>
                        <li>bool DeleteImplementation(int id)</li>
                        <li>IntelliTect.Coalesce.Models.SaveResult&lt;TDto&gt; SaveImplementation(TDto dto, string includes = null)</li>
                        <li>void SetTracking(T item)</li>
                        <li>IntelliTect.Coalesce.Models.SaveResult&lt;TDto&gt; ChangeCollection(int id, string propertyName, int childId, string method)</li>
                        <li>object IdValue(TDto dto)</li>
                        <li>object IdValue(T item)</li>
                        <li>System.Reflection.PropertyInfo GetDbSet(System.Type t)</li>
                        <li>System.Linq.IQueryable&lt;T&gt; DatabaseCompareExpression(System.Linq.IQueryable&lt;T&gt; query, IntelliTect.Coalesce.TypeDefinition.PropertyViewModel prop, string value, System.TimeZoneInfo timeZone)</li>
                        <li>bool BeforeSave(TDto dto, T obj)</li>
                        <li>bool AfterSave(TDto dto, T obj, TContext context)</li>
                        <li>bool BeforeDelete(T obj)</li>
                        <li>bool AfterDelete(T obj, TContext context)</li>
                        <li>void .cctor()</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">BaseViewController&lt;T, TContext&gt;</span></div>
                <ul>
                                        <li class="bold">Methods</li>
                        <li>void .ctor(Microsoft.Extensions.PlatformAbstractions.IApplicationEnvironment appEnv)</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">BaseViewController&lt;T, TDto, TContext&gt;</span></div>
                <ul>
                    <li class="bold">Properties</li>
                        <li>String ControllerName</li>
                        <li>String ApiName</li>
                                        <li class="bold">Methods</li>
                        <li>void .ctor(Microsoft.Extensions.PlatformAbstractions.IApplicationEnvironment appEnv)</li>
                        <li>Microsoft.AspNetCore.Mvc.ActionResult IndexImplementation(bool editable)</li>
                        <li>Microsoft.AspNetCore.Mvc.ActionResult CreateEditImplementation()</li>
                        <li>Microsoft.AspNetCore.Mvc.ActionResult EditorHtmlImplementation(bool simple = False)</li>
                        <li>Microsoft.AspNetCore.Mvc.ActionResult DocsImplementation()</li>
                </ul>
            </li>
    </ul>
    <h2>Models</h2>
    <ul class="attributeList">
            <li>
                <div><span class="bold">ListResult</span></div>
                <ul>
                    <li class="bold">Properties</li>
                    <li>Boolean WasSuccessful</li>
                    <li>String Message</li>
                    <li>Int32 Page</li>
                    <li>Int32 PageSize</li>
                    <li>Int32 PageCount</li>
                    <li>Int32 TotalCount</li>
                    <li>IEnumerable List</li>
                                        <li class="bold">Methods</li>
                    <li>void .ctor()</li>
                    <li>void .ctor(System.Collections.IEnumerable objs)</li>
                    <li>void .ctor(System.Collections.IEnumerable objs, int page, int totalCount, int pageSize)</li>
                    <li>void .ctor(System.Exception ex)</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">SaveResult</span></div>
                <ul>
                    <li class="bold">Properties</li>
                    <li>Boolean WasSuccessful</li>
                    <li>String Message</li>
                    <li>List ValidationIssues</li>
                                        <li class="bold">Methods</li>
                    <li>void .ctor()</li>
                    <li>void .ctor(bool wasSuccessful)</li>
                    <li>void .ctor(System.Exception ex)</li>
                    <li>void .ctor(string problem)</li>
                    <li>string AddIssue(System.Exception ex)</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">SaveResult&lt;T&gt;</span></div>
                <ul>
                    <li class="bold">Properties</li>
                    <li>T Object</li>
                                        <li class="bold">Methods</li>
                    <li>void .ctor()</li>
                    <li>void .ctor(string problem)</li>
                    <li>void .ctor(bool wasSuccessful, T obj)</li>
                    <li>void .ctor(System.Exception ex)</li>
                </ul>
            </li>
            <li>
                <div><span class="bold">ValidationIssue</span></div>
                <ul>
                    <li class="bold">Properties</li>
                    <li>String Property</li>
                    <li>String Issue</li>
                                        <li class="bold">Methods</li>
                    <li>void .ctor(string property, string issue)</li>
                </ul>
            </li>
    </ul>
</div>