@model IntelliTect.Coalesce.TypeDefinition.ClassViewModel
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Models
@{ Layout = "_Master"; }
@{
    ClassViewModel vm = Model;
    TypeScriptDocumentation objDoc = ViewBag.ObjDoc;
    TypeScriptDocumentation listDoc = ViewBag.ListDoc;
}


<div class="panel panel-default ">
    <div class="panel-heading">
        <h2>Docs for @vm.Name</h2>
    </div>
    <div class="panel-body">
        <div>
            This is an automatically generated server and client side stack based on an underlying Entity Framework (EF)
            class (POCO).
        </div>
        <div>
            The full implementation contains three layers.
            <ol>
                <li>
                    An API which provides underlying access to the data and provides support for
                    getting lists, getting single items, creating, and updating.
                </li>
                <li>An automatically generated view model (VM) for Knockout. Other client side VMs can also be supported.</li>
                <li>A user interface that allows for simple editing of information in both a grid and a traditional form. This uses the underlying Knockout view model.</li>
            </ol>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>Security: @vm.SecurityInfo.ToString()</h4>
            </div>
        </div>


        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>@vm.Name Properties</h3>
            </div>
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Read Only</th>
                    <th>Has Valid Values</th>
                    <th>Security</th>
                </tr>
                @foreach (var prop in vm.Properties)
                {
                    <tr>
                        <th>@prop.Name</th>
                        <td>
                            @if (prop.IsPOCO)
                            {
                                <a href="/@prop.Name/docs">@prop.Name</a>
                            }
                            else if (prop.Type.IsCollection)
                            {
                                <a href="/@prop.PureType.Name/docs">List of @prop.PureType.Name</a>
                            }
                            else
                            {
                                <span>@prop.PureType.Name</span>
                            }
                        </td>
                        <td>@prop.IsRequired</td>
                        <td>@prop.IsReadOnly</td>
                        <td>@prop.HasValidValues</td>
                        <td>@prop.SecurityInfo.ToString()</td>
                    </tr>
                }
            </table>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>@vm.Name Search Properties</h3>
            </div>
            <table class="table">
                <tr>
                    <th>Property</th>
                    <th>Split on Spaces</th>
                    <th>Search Type</th>
                </tr>
                @foreach (var prop in vm.SearchProperties())
                {
                    <tr>
                        <th>@prop.Key</th>
                        <td>@prop.Value.SearchIsSplitOnSpaces</td>
                        <td>@prop.Value.SearchMethodName</td>
                    </tr>
                }

            </table>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>@vm.Name Methods</h3>
            </div>
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>C# Parameters</th>
                    <th>TypeScript Parameters</th>
                    <th>Security</th>
                </tr>
                @foreach (var method in vm.Methods.Where(m=>m.IsClientMethod))
                {
                    <tr>
                        <th>@method.Name</th>
                        <td>
                            @method.ReturnType.NameWithTypeParams
                        </td>
                        <td>
                            @method.CsParameters
                        </td>
                        <td>
                            @method.TsParameters
                        </td>
                       <td>@method.SecurityInfo.ToString()</td>
                    </tr>
                }
            </table>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>@vm.Name Alternate List Data Sources</h3>
                <div>These can be accessed via the list view model's listDataSource via an enumeration.</div>
            </div>
            @if (vm.Methods.Any(m => m.IsIQueryableOfParent && m.IsClientMethod))
            {
            <ul>
                @foreach (var method in vm.Methods.Where(m => m.IsIQueryableOfParent && m.IsClientMethod))
                {
                    <li>
                        @method.Name
                    </li>
                }
            </ul>
            }
            else
            {
                <div class="panel-body">
                    None
                </div>
            }
        </div>



        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>@vm.ApiUrl</h3>
            </div>
            <table class="table">
                <tr>
                    <th>List</th>
                    <td>
                        <p>Provides a list of generated DTOs, or if specified your custom DTO.</p>
                        <dl>
                            <dt>Page</dt>
                            <dd>Page number to retrieve</dd>

                            <dt>PageSize</dt>
                            <dd>Number of items per page</dd>

                            <dt>Search</dt>
                            <dd>
                                Text to search for in predefined fields. By convention the Name field is searched if it exists.
                                Fields can be specified with the [Search] attribute. If none of this is true, nothing is searched.
                            </dd>

                            <dt>OrberBy</dt>
                            <dd>Field by which to order the list. If not specified the ID field will be used.</dd>

                            <dt>OrderByDescending</dt>
                            <dd>Field to order by with descending order.</dd>

                            <dt>Include</dt>
                            <dd>Child records to explicitly include if not using lazy loading.</dd>

                            <dt>Includes</dt>
                            <dd>The name of the list of child items to include by default, all immediate children are included. Specify 'none' to get no children. Note: this only works if lazy loading is turned off.</dd>

                            <dt>List of field=value</dt>
                            <dd>
                                A query parameter with the format [field]=[value] will automatically create a filter.
                            </dd>

                            <dt>Filter</dt>
                            <dd>Free form SQL filter with the syntax [field][operator][value]. eg. name='test', price>10</dd>

                            <dt>Dto</dt>
                            <dd>Fully qualified name of the DTO to return - i.e., Coalesce.Domain.Dtos.PersonDropDownDto</dd>

                            <dt>ToList</dt>
                            <dd>
                                Adding ToList to the query string will cause the query to execute before the sorting and paging,
                                but after any filtering. This allows for sorting based on calculated fields.
                            </dd>
                        </dl>
                    </td>
                </tr>
                <tr>
                    <th>CustomList</th>
                    <td>
                        <p>Almost the same as List, but allows for specifying a list of fields that will be returned.  On the server
                            the standard generated DTO is created, then all properties not in the list of fields will be set to null.</p>
                        <dl>
                            <dt>All parameters from List apply to CustomList, except Dto.</dt>
                            <dd>&nbsp;</dd>
                            <dt>List of fields</dt>
                            <dd>
                                Any other string will be treated as a requested field name. If none are specified,
                                all fields will be returned, otherwise only specified fields will be returned in a dynamic object.
                            </dd>
                        </dl>
                    </td>
                </tr>
                <tr>
                    <th>Get/id</th>
                    <td>
                        <p>Get an item by id</p>
                </tr>
                <tr>
                    <th>Save</th>
                    <td>
                        <p>Saves an item based on the DTO passed in.</p>
                        <p>
                            If the Id is non zero an update is attempted.
                            If the Id is zero a new item is created. Validation is performed and passed back in the resultant object.
                            The the save was successful a WasSuccessful flag is set to true. The saved object is passed back
                            in the Object property. A message can be passed back in the Message Property.
                            Field level validation is returnecd in ValidationIssues.
                        </p>
                </tr>
                <tr>
                    <th>PropertyValue</th>
                    <td>
                        <p>Gets values of a property. This is typically for drop down suggestion lists.</p>
                        <p>
                            <dl>
                                <dt>property</dt>
                                <dd>Property name to get</dd>
                                <dt>page</dt>
                                <dd>Page to retrieve. Default is 1</dd>
                                <dt>search</dt>
                                <dd>Search text</dd>
                            </dl>

                        </p>
                </tr>
                <tr>
                    <th>Count</th>
                    <td>
                        <p>Gives a count of items based on a where clause.</p>
                        <p>
                            <dl>
                                <dt>Search</dt>
                                <dd>
                                    Text to search for in predefined fields. By convention the Name field is searched if it exists.
                                    Fields can be specified with the [Search] attribute. If none of this is true, nothing is searched.
                                </dd>
                                <dt>Filter</dt>
                                <dd>Free form SQL filter with the syntax [field][operator][value]. eg. name='test', price>10</dd>
                            </dl>
                       </p>
                </tr>
                <tr>
                    <th>Delete</th>
                    <td>
                        <p>Deletes the ID.</p>
                        <p>
                            <dl>
                                <dt>id</dt>
                                <dd>ID to delete</dd>
                            </dl>
                        </p>
                </tr>
                <tr>
                    <th>ChangeCollection</th>
                    <td>
                        <p>Changes a child many-to-many collection.</p>
                        <p>
                            <dl>
                                <dt>id</dt>
                                <dd>ID of the parent item. Object that matches the type of the controller.</dd>
                                <dt>propertyName</dt>
                                <dd>Name of the many-to-many collection's property.</dd>
                                <dt>childId</dt>
                                <dd>ID of the child item to add/remove.</dd>
                                <dt>method</dt>
                                <dd>Add or Remove.</dd>
                            </dl>
                        </p>
                </tr>
            </table>

        </div>


        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>View Model for @vm.Name</h3>
                <h4>JavaScript Class: @(objDoc.Namespace).@(objDoc.Name)</h4>
                <h5>TypeScript File: @(objDoc.TsFilename)</h5>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Observable</th>
                        <th>Type</th>
                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var f in objDoc.Functions.OrderBy(f=>f.Name))
                    {
                        <tr>
                            <td>@f.Name</td>
                            <td>@f.Observable</td>
                            <td>@f.Type</td>
                            <td>@f.Comment</td>
                        </tr>
                    }
                    @foreach (var f in ((TypeScriptDocumentation)(ViewBag.BaseObjDoc)).Functions.OrderBy(f => f.Name))
                    {
                        <tr>
                            <td>@f.Name</td>
                            <td>@f.Observable</td>
                            <td>@f.Type</td>
                            <td>@f.Comment</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>View Model for @vm.ListViewModelClassName</h3>
                <h4>JavaScript Class: @(listDoc.Namespace).@(listDoc.Name)</h4>
                <h5>TypeScript File: @(listDoc.TsFilename)</h5>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Observable</th>
                        <th>Type</th>
                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var f in listDoc.Functions.OrderBy(f => f.Name))
                    {
                        <tr>
                            <td>@f.Name</td>
                            <td>@f.Observable</td>
                            <td>@f.Type</td>
                            <td>@f.Comment</td>
                        </tr>
                    }
                    @foreach (var f in ((TypeScriptDocumentation)(ViewBag.BaseListDoc)).Functions.OrderBy(f => f.Name))
                    {
                        <tr>
                            <td>@f.Name</td>
                            <td>@f.Observable</td>
                            <td>@f.Type</td>
                            <td>@f.Comment</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
</div>

