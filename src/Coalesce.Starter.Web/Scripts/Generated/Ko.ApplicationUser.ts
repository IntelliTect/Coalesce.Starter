
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: ApplicationUser
// Auto Generated by IntelliTect.Coalesce

module ViewModels {

	export class ApplicationUser extends Coalesce.BaseViewModel<ApplicationUser>
    {
        protected modelName = "ApplicationUser";
        protected primaryKeyName = "applicationUserId";
        protected modelDisplayName = "Application User";

        protected apiController = "/ApplicationUser";
        protected viewController = "/ApplicationUser";
    
        /** 
            The enumeration of all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.ApplicationUserDataSources = ListViewModels.ApplicationUserDataSources;

        /**
            The data source on the server to use when retrieving the object.
            Valid values are in this.dataSources.
        */
        public dataSource: ListViewModels.ApplicationUserDataSources = ListViewModels.ApplicationUserDataSources.Default;

        /** Behavioral configuration for all instances of ApplicationUser. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<ApplicationUser>
            = new Coalesce.ViewModelConfiguration<ApplicationUser>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current ApplicationUser instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<ApplicationUser>
            = new Coalesce.ViewModelConfiguration<ApplicationUser>(ApplicationUser.coalesceConfig);
    

        public applicationUserId: KnockoutObservable<number> = ko.observable(null);
        public name: KnockoutObservable<string> = ko.observable(null);

       
        






        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true) => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.applicationUserId;
            this.applicationUserId(data.applicationUserId);
            // Load the lists of other objects
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.

            // The rest of the objects are loaded now.
            this.name(data.name);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
    
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };

        /** Save the object into a DTO */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.applicationUserId = this.applicationUserId();

            dto.name = this.name();

            return dto;
        }
        
        public setupValidation = () => {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
    
        // Computed Observable for edit URL
        public editUrl = ko.pureComputed(() => {
            return this.coalesceConfig.baseViewUrl() + this.viewController + "/CreateEdit?id=" + this.applicationUserId();
        });

        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;

            if (this.coalesceConfig.setupValidationAutomatically.peek()) {
                this.setupValidation();
            }

            // Create computeds for display for objects

    



            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables

            self.name.subscribe(self.autoSave);
        
            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace ApplicationUser {

        // Classes for use in method calls to support data binding for input for arguments
    }
}