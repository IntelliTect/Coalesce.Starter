
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: ApplicationUser
// Generated by IntelliTect.Coalesce

module ListViewModels {

    export namespace ApplicationUserDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.ApplicationUser> { }
            }

    export class ApplicationUserList extends Coalesce.BaseListViewModel<ViewModels.ApplicationUser> {
        protected modelName: string = "ApplicationUser";
        protected apiController: string = "/ApplicationUser";
        public modelKeyName: string = "applicationUserId";
        public itemClass: new () => ViewModels.ApplicationUser = ViewModels.ApplicationUser;

        public filter: {
            applicationUserId?:string;
            name?:string;
        } = null;
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof ApplicationUserDataSources = ApplicationUserDataSources;

        /**
            The data source on the server to use when retrieving objects.
            Valid values are in this.dataSources.
        */
        public dataSource: Coalesce.DataSource<ViewModels.ApplicationUser> = new this.dataSources.Default();

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<ApplicationUserList, ViewModels.ApplicationUser>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig: Coalesce.ListViewModelConfiguration<ApplicationUserList, ViewModels.ApplicationUser>
            = new Coalesce.ListViewModelConfiguration<ApplicationUserList, ViewModels.ApplicationUser>(ApplicationUserList.coalesceConfig);


        protected createItem = (newItem?: any, parent?: any) => new ViewModels.ApplicationUser(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace ApplicationUserList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}