@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@{
    ClassViewModel model = Model.Model;
    string typingReferencePath = "../..";
    string intellitectUtilitiesPath = "..";
    string moduleName = "ViewModels";
    string listModuleName = "ListViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        typingReferencePath = "../../../..";
        intellitectUtilitiesPath = "../../../../scripts";
        moduleName = Model.AreaName + "." + moduleName;
        listModuleName = Model.AreaName + "." + listModuleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
}
@{ 
@:/// <reference path="@typingReferencePath/typings/tsd.d.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.utilities.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.ko.utilities.ts" />
@:/// <reference path="@intellitectUtilitiesPath/Coalesce/intellitect.ko.base.ts" />
}



// Knockout View Model for: @(model.Name)
// Auto Generated Knockout Object Bindings
// Copyright IntelliTect, @(DateTime.Now.Year)

var baseUrl = baseUrl || '';
var saveTimeoutInMs = saveTimeoutInMs || 500;

module @moduleName {
    export var areaUrl = areaUrl || ((@string.IsNullOrWhiteSpace(Model.AreaName).ToString().ToLower()) ? baseUrl : baseUrl + '@Model.AreaName/');

	export class @(model.ViewModelClassName)
    {
        private loadingCount: number = 0;  // Stack for number of times loading has been called.
        private saveTimeout: number = 0;   // Stores the return value of setInterval for automatic save delays.
        // Callbacks to call after a delete.
        public deleteCallbacks: { ( myself: @(model.ViewModelClassName) ): void; } [] = [];
        // Callbacks to call after a save.
        public saveCallbacks: { ( myself: @(model.ViewModelClassName) ): void; } [] = [];    
        private loadingValidValues: number = 0;

        // String that defines what data should be included with the returned object.
        public includes = null;
        // The custom code to run in order to pull the initial datasource to use for the object that should be returned
        public dataSource: ListViewModels.@(model.Name)DataSources = ListViewModels.@(model.Name)DataSources.Default;
        // If true, the busy indicator is shown when loading.
        public showBusyWhenSaving = false;  // If true a busy indicator shows when saving.
        // Whether or not alerts should be shown when loading fails.
        public showFailureAlerts: boolean = true;

        // Parent of this object.
        public parent = null;
        // Collection that this object is a part of.
        public parentCollection = null;
        // ID of the object.
        public myId: any = 0;

        // Dirty Flag
        public isDirty: KnockoutObservable<boolean> = ko.observable(false);
        // Error message for the page
        public errorMessage: KnockoutObservable<string> = ko.observable(null);
        // ValidationIssues returned from database when trying to persist data
        public validationIssues: any = ko.observableArray([]);
        // If this is true, all changes will be saved automatically.
        public isSavingAutomatically = true;
        // Flag to use to determine if this item is shown. Only for convenience.
        public isVisible: KnockoutObservable<boolean> = ko.observable(false);
        // Flag to use to determine if this item is expanded. Only for convenience.
        public isExpanded: KnockoutObservable<boolean> = ko.observable(false);
        // Flag to use to determine if this item is selected. Only for convenience.
        public isSelected: KnockoutObservable<boolean> = ko.observable(false);
        // Flag to use to determine if this item is checked. Only for convenience.
        public isChecked: KnockoutObservable<boolean> = ko.observable(false);
        // Alternates the isExpanded flag. Use with a click binding for a button.
        public changeIsExpanded: (value?: boolean) => void;
        // Flag to use to determine if this item is being edited. Only for convenience.
        public isEditing = ko.observable(false);
        // Alternates the isEditing flag. Use with a click binding for a button.
        public changeIsEditing: (value?: boolean) => void;
        // List of errors found during validation.
        public errors: any = ko.observableArray([]);
        // List of warnings found during validation. These allow a save.
        public warnings: any = ko.observableArray([]);
        // Custom Field that can be used via scripts. This allows for setting observables via scripts and using them without modifying the ViewModel
        public customField1: KnockoutObservable<any> = ko.observable();
        // Custom Field 2 that can be used via scripts. This allows for setting observables via scripts and using them without modifying the ViewModel
        public customField2: KnockoutObservable<any> = ko.observable();
        // Custom Field 3 that can be used via scripts. This allows for setting observables via scripts and using them without modifying the ViewModel
        public customField3: KnockoutObservable<any> = ko.observable();


        // True if the object is currently saving.
        public isSaving: KnockoutObservable<boolean> = ko.observable(false);
        // Internal count of child objects that are saving.
        public savingChildCount: KnockoutObservable<number> = ko.observable(0);
        // True if the object or any of its children are currently saving.
        public isSavingWithChildren: () => boolean;
        // Internally used member to count the number of saving children.
        public savingChildChange: (isSaving: boolean) => void;

        // Set this false when editing a field that saves periodically while the user is typing. 
        // By default(null), isDataFromSaveLoadedComputed will check the parent's value. 
        // If the topmost parent is null, the value is true. Otherwise the first set value will be returned.
        public isDataFromSaveLoaded: boolean = null;
        // Used internally to determine if the data from a save operation should be loaded.
        public isDataFromSaveLoadedComputed: () => boolean;
        public isValid: () => boolean;
    
        // Observables
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasViewModelProperty))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.JsVariable): @(prop.Type.TsKnockoutType) = @(prop.Type.JsKnockoutType);
        if (prop.Type.IsEnum || (prop.Type.IsNullable && prop.PureType.IsEnum))
        {
        @:// Text value for enumeration @prop.Name
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.JsTextPropertyName): KnockoutComputed<string> = ko.computed<string>(() => "");
        }
        if (prop.IsManytoManyCollection)
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ManyToManyCollectionName.ToCamelCase()): KnockoutObservableArray<ViewModels.@(prop.ManyToManyCollectionProperty.Object.ViewModelClassName)> = ko.observableArray([]);  // Many to Many Collection
        }
        }

       
        // True if the object is loading.
        public isLoading: KnockoutObservable<boolean> = ko.observable(false);
        // True once the data has been loaded.
		public isLoaded: KnockoutObservable<boolean> = ko.observable(false);
        // URL to a stock editor for this object.
        public editUrl: () => string;
        // Create computeds for display for objects
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsInternalUse))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @prop.JsTextPropertyName: () => string;
        }
        // Loads this object from a data transfer object received from the server.
        // Force: Will override the check against isLoading that is done to prevent recursion.
        // AllowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        public loadFromDto: (data: any, force?: boolean, allowCollectionDeletes?: boolean) => void;
        // Called at the end of loadFromDto to allow for custom code like sorting child collections.
        public afterLoadFromDto:() => void;
        // Saves this object into a data transfer object to send to the server.
        public saveToDto: () => any;
        // Saves the object to the server and then calls the callback.
        public save: (callback?: any) => void;
        // Validates the model.
        public validate: () => boolean;
        // Loads the object from the server based on the id specified. Once complete calls the callback.
        public load: (id: any, callback?: any) => void
        // Reloads the object from the server.
        public reload: (callback?: any) => void;
        // Deletes the object after a user confirmation. Bind this to delete buttons.
        public deleteItemWithConfirmation: (callback?: any, message?: string) => void;
        // Deletes the object without confirmation.
        public deleteItem: (callback?: any) => void;
        
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
        {
        if (prop.Comment.Length > 0)
        {
        @:// Add object to @(prop.JsVariable)
        }
        @:public addTo@(prop.Name): () => @prop.PureType.ClassViewModel.Name;
        @:// List Object model for @(prop.Name). Allows for loading subsets of data.
        @:public @(prop.JsVariable)List: (loadImmediate?: boolean) => @(listModuleName).@(prop.Object.ListViewModelClassName);
        }
        
        // Saves a many-to-many collection change. This is done automatically and doesn't need to be called.
        public saveCollection: (propertyName, childId, operation)  => void;
        // Callback to be called when this item is deleted.
        public onDelete: (fn: any) => void;
        // Callback to be called when a save is done.
        public onSave: (fn: any) => void;
        // If true, changes to the object are saved automatically. If false, save() needs to be called.
        public autoSave: () => void;
        // If true, many-to-many collections are automatically saved.
        public autoSaveCollection: (property: string, id: any, changeStatus: string) => void;
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && !f.IsInternalUse && f.PureTypeOnContext))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ListEditorUrlName): () => void; 
        }
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
        {
        if (prop.Comment.Length > 0)
        {
        @:// @(prop.Comment)
        }
        @:public @(prop.ValidValueListName.ToCamelCase()): KnockoutObservableArray<any> = ko.observableArray([]);
        @:public load@(prop.ValidValueListName): (callback?: any) => void;
        }
        // Pops up a stock editor for this object.
        public showEditor: () => void;
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsInternalUse))
        {
        @:public show@(prop.Name)Editor: () => void;
        }
        // Loads collections of valid values. May be removed.
        public loadValidValues: (callback?: any) => void;
        // Loads any children that have an ID but have not been loaded. 
        // This is useful when creating an object that has a parent object and the ID is set on the new child.
        public loadChildren: (callback?: any) => void;
        // Selects this item and deselects other items in the parentCollection.
        public selectSingle: () => boolean;
        public isSelectedToggle: () => boolean;


        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:public @(prop.JsVariable)Values: EnumValue[] = [ 
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:{ id: @kvp.Key, value: '@kvp.Value.ToProperCase()' },
        }
        @:];
        }

        @foreach(var method in model.Methods.Where(m => m.IsClientMethod && (!m.IsStatic || m.ReturnType.Name == model.Name)))
        {
        @:// Call server method (@method.Name)
        if (method.Comment.Length > 0)
        {
        @:// @(method.Comment)
        }
        @:public @method.JsVariable: (@method.TsParameters) => void;
        @:// Result of server method (@method.Name)
        @:public @method.JsVariableResult: @method.ReturnType.TsKnockoutType = @method.ReturnType.JsKnockoutType;
        @:// True while the server method (@method.Name) is being called
        @:public @method.JsVariableIsLoading: KnockoutObservable<boolean> = ko.observable(false);
        @:// Error message for server method (@method.Name) if it fails.
        @:public @method.JsVariableMessage: KnockoutObservable<string> = ko.observable(null);
        @:// True if the server method (@method.Name) was successful.
        @:public @method.JsVariableWasSuccessful: KnockoutObservable<boolean> = ko.observable(null);
        @:// Presents a series of input boxes to call the server method (@method.Name)
        @:public @method.JsVariableUi: (callback?: any, reload?: boolean) => void;
        @:// Presents a modal with input boxes to call the server method (@method.Name)
        @:public @method.JsVariableModal: (callback?: any, reload?: boolean) => void;
        @:// Variable for method arguments to allow for easy binding
        @if (method.ClientParameters.Any())
        {
        @:public @method.JsVariableWithArgs: (args?: @(model.Name).@(method.ArgsName), callback?: any, reload?: boolean) => void;
        @:// Object that can be easily bound to fields to allow data entry for the method
        @:public @(method.JsVariableArgs) = new @(model.Name).@(method.ArgsName)(); 
        }
        @:
        }
        
        public originalData: KnockoutObservable<any> = ko.observable(null);
        
        // This method gets called during the constructor. This allows injecting new methods into the class that use the self variable.
        public init(myself: @(model.ViewModelClassName)) {};

        constructor(newItem?: any, parent?: any){
            var self = this;
            self.parent = parent;
            self.myId;
            // Call an init function that allows for proper inheritance.
            if ($.isFunction(self.init)){
                self.init(self);
            }
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty))
            {
                if (prop.Type.IsDate)
                {
			@:self.@prop.JsVariable = self.@(prop.JsVariable).extend({ moment: { unix: true } });
                }
                if (prop.IsRequired || prop.MaxLength.HasValue || prop.MinLength.HasValue || prop.Range != null)
                {
			@:self.@prop.JsVariable = self.@(prop.JsVariable).extend({ @(prop.BuiltInDataAnnotationsValidationKnockoutJs) });
                }
            if (prop.HasClientValidation)
                {
            @:self.@prop.JsVariable = self.@(prop.JsVariable).extend({ @(prop.ClientValidationKnockoutJs) });
                }
            }
            
            self.errors = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && !p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);
            self.warnings = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);

            self.changeIsExpanded = function(value?: boolean) { // Call this with the edit button.
                if (value !== true || value !== false) self.isExpanded(!self.isExpanded());
                else self.isExpanded(value === true); // Force boolean
            };
            self.changeIsEditing = function (value){  // Call this with the edit button.
                if (value !== true || value !== false) self.isEditing(!self.isEditing());
                else self.isEditing(value === true);  // Force boolean
            };

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return areaUrl + "@(model.ControllerName)/CreateEdit?id=" + self.@(model.PrimaryKey.JsVariable)();
            });

            // Create computeds for display for objects
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsComplexType && !f.IsInternalUse))
            {
			@:self.@prop.JsTextPropertyName = ko.computed(function()
			@:{   // If the object exists, use the text value. Otherwise show 'None'
				@:if (self.@(prop.JsVariable)() && self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)()) {
					@:return self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)().toString();
				@:} else {
					@:return "None";
				@:}
			@:});
            }


            // Load the ViewModel object from the DTO. 
            // Force: Will override the check against isLoading that is done to prevent recursion. False is default.
            // AllowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
			self.loadFromDto = function(data: any, force: boolean = false, allowCollectionDeletes: boolean = true) {
				if (!data || (!force && self.isLoading())) return;
				self.isLoading(true);
				// Set the ID 
				self.myId = data.@(model.PrimaryKey.JsonName);
				// Load the lists of other objects
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.Type.IsCollection && p.HasViewModel))
            { 
                @:if (data.@prop.JsonName != null) {
                @if (prop.Object.PrimaryKey != null)
                {
				    @:// Merge the incoming array
				    @:RebuildArray(self.@prop.JsVariable, data.@prop.JsonName, '@prop.Object.PrimaryKey.JsonName', @prop.Object.ViewModelClassName, self, allowCollectionDeletes);
                    if (prop.IsManytoManyCollection)
                    {
                    @:// Add many-to-many collection
                    @:var objs = [];
                    @:$.each(data.@prop.JsonName, function(index, item) {
                        @:if (item.@prop.ManyToManyCollectionProperty.JsonName){
                            @:objs.push(item.@prop.ManyToManyCollectionProperty.JsonName);
                        @:}
                    @:});
				    @:RebuildArray(self.@(prop.ManyToManyCollectionName.ToCamelCase()), objs, '@prop.ManyToManyCollectionProperty.ObjectIdProperty.JsVariable', @prop.ManyToManyCollectionProperty.Object.ViewModelClassName, self, allowCollectionDeletes);
                    }
                }
                else if (prop.PureType.IsPrimitive)
                {
                    @:self.@(prop.JsVariable)(data.@prop.JsVariable);
                }
                else
                {
                    @:RebuildArray(self.@prop.JsVariable, data.@prop.JsonName, null, @prop.Object.ViewModelClassName, self, allowCollectionDeletes);
                }
				@:} 
            }
				// Objects are loaded first so that they are available when the IDs get loaded.
				// This handles the issue with populating select lists with correct data because we now have the object.
                @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && p.IsPOCO && !p.Type.IsCollection && !p.IsComplexType && !p.IsInternalUse))
	            {
				@:if (!data.@prop.JsonName) { 
                    if (prop.ObjectIdProperty != null) {
					@:if (data.@prop.ObjectIdProperty.JsonName != self.@(prop.ObjectIdProperty.JsVariable)()) {
                        @:self.@(prop.JsVariable)(null);
                    @:}
                    }else{
					@:self.@(prop.JsVariable)(null);
                    }
                @:}else {
                    @:if (!self.@(prop.JsVariable)()){
					    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(data.@prop.JsonName, self));
				    @:}else{
					    @:self.@(prop.JsVariable)().loadFromDto(data.@prop.JsonName);
				    @:}
                    @:if (self.parent && self.parent.myId == self.@(prop.JsVariable)().myId && intellitect.utilities.getClassName(self.parent) == intellitect.utilities.getClassName(self.@(prop.JsVariable)()))
                    @:{
                        @:self.parent.loadFromDto(data.@prop.JsonName, undefined, false);
                    @:}
                @:}
                }

				// The rest of the objects are loaded now.
                @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                {
                if (prop.Type.IsDate)
                { 
                @:if (data.@prop.JsonName == null) self.@(prop.JsVariable)(null);
				@:else if (self.@(prop.JsVariable)() == null || self.@(prop.JsVariable)() == false || !self.@(prop.JsVariable)().isSame(moment(data.@prop.JsonName))){
				    @:self.@(prop.JsVariable)(moment(data.@prop.JsonName));
				@:}
                } else if (!prop.IsPOCO) {
				@:self.@(prop.JsVariable)(data.@prop.JsonName);
                }else if (prop.IsComplexType) {
                // Complex Type: @prop.JsonName
                @foreach (PropertyViewModel subProp in prop.Object.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                {
				@:self.@(prop.JsVariable)().@(subProp.JsVariable)(data.@(prop.JsonName).@(subProp.JsonName));
                }
            }
         }
                if (self.afterLoadFromDto){
                    self.afterLoadFromDto();
                }
				self.isLoading(false);
				self.isDirty(false);
                self.validate();
			};

    	    // Save the object into a DTO
			self.saveToDto = function() {
				var dto: any = {};
				dto.@(model.Properties.First(f=>f.IsPrimaryKey).JsonName) = self.@(model.Properties.First(f=>f.IsPrimaryKey).JsVariable)();

                @foreach (PropertyViewModel prop in model.Properties.Where(f => f.CanWrite && !f.IsPOCO && !f.HasReadOnlyAttribute && !f.HasReadOnlyApiAttribute && f.HasViewModelProperty || f.IsComplexType))
                {
                if (prop.Type.IsDateTimeOffset)
                {
				@:if (!self.@(prop.JsVariable)()) dto.@prop.Name = null;
				@:else dto.@prop.JsonName = self.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ssZZ');
                }
                else if (prop.Type.IsDateTime)
                { 
                @:if (!self.@(prop.JsVariable)()) dto.@prop.Name = null;
				@:else dto.@prop.JsonName = self.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ss');
                }
                else if (prop.IsComplexType) 
                {
                @:// Complex Type: @prop.Name>
				@:dto.@(prop.JsonName)={};
                    foreach (PropertyViewModel subProp in prop.Object.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
                    {
				@:dto.@(prop.JsonName).@(subProp.JsonName) = self.@(prop.JsVariable)().@(subProp.JsVariable)();
                    }
                }
                else if (prop.IsForeignKey)
                {
				@:dto.@prop.JsonName = self.@(prop.JsVariable)();
                    if (prop.IdPropertyObjectProperty != null && !prop.IsPrimaryKey)
                    {
				// If the Id isn't set, use the object and see if that is set. Allows a child to get an Id after the fact. 
				@:if (!dto.@prop.JsonName && self.@(prop.IdPropertyObjectProperty.JsVariable)()) {
				    @:dto.@prop.JsonName = self.@(prop.IdPropertyObjectProperty.JsVariable)().@(prop.IdPropertyObjectProperty.Object.PrimaryKey.JsVariable)();
				@:}
                }
                }
                else if (!prop.Type.IsCollection)
                {
    	        @:dto.@prop.JsonName = self.@(prop.JsVariable)();
                }
                }

				return dto;
			}

			self.save = function(callback?: any) {
				if (!self.isLoading()) {
					if (self.validate()) {
						if (self.showBusyWhenSaving) intellitect.utilities.showBusy();
						self.isSaving(true);

                        
                        var url = areaUrl + "@(model.ApiUrl)/Save?includes=" + self.includes + '&dataSource=';
                        if (typeof self.dataSource === "string") url += self.dataSource;
                        else url += ListViewModels.@(model.Name)DataSources[self.dataSource];

                        $.ajax({ method: "POST", url: url, data: self.saveToDto(), xhrFields: { withCredentials: true } })
						.done(function(data) {
							self.isDirty(false);
							self.errorMessage('');
                            if (self.isDataFromSaveLoadedComputed()) {
								self.loadFromDto(data.object, true);
                            }
							// The object is now saved. Call any callback.
							for (var i in self.saveCallbacks) {
								self.saveCallbacks[i](self);
							}
						})
						.fail(function(xhr) {
                            var errorMsg = "Unknown Error";
                            var validationIssues = [];
                            if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                            if (xhr.responseJSON && xhr.responseJSON.validationIssues) validationIssues = xhr.responseJSON.validationIssues;
                            self.errorMessage(errorMsg);
                            self.validationIssues(validationIssues);
                            // If an object was returned, load that object.
                            if (xhr.responseJSON && xhr.responseJSON.object){
                                self.loadFromDto(xhr.responseJSON.object, true);
                            }
                            if (self.showFailureAlerts)
                                alert("Could not save the item: " + errorMsg);
						})
						.always(function() {
							self.isSaving(false);
							if ($.isFunction(callback)) {
								callback();
							}
							if (self.showBusyWhenSaving) intellitect.utilities.hideBusy();
						});
					}
                    else
                    {
                        // If validation fails, we still want to try and load any child objects which may have just been set.
                        // Normally, we get these from the result of the save.
                        self.loadChildren();
                    }
				}
			}

			// Assign this function to add validation that prevents saving  by returning false.
			// Return true to continue to save.
			self.validate = function() { 
                self.errors.showAllMessages();
                self.warnings.showAllMessages();
                return self.errors().length == 0;
            };

			// Loads an item.
			self.load = function(id: any, callback?) {
                if (!id) {
                    id = self.@(model.PrimaryKey.JsVariable)();
                }
                if (id) {
                    self.isLoading(true);
                    intellitect.utilities.showBusy();

                    var url = areaUrl + "@(model.ApiUrl)/Get/" + id + '?includes=' + self.includes + '&dataSource=';
                    if (typeof self.dataSource === "string") url += self.dataSource;
                    else url += ListViewModels.@(model.Name)DataSources[self.dataSource];

                    $.ajax({ method: "GET", url: url, xhrFields: { withCredentials: true } })
                        .done(function(data) {
                            self.loadFromDto(data, true);
                            self.isLoaded(true);
                            if ($.isFunction(callback)) callback(self);
                        })
                        .fail(function() {
                            self.isLoaded(false);
                            if (self.showFailureAlerts)
                                alert("Could not get @(model.Name) with id = " + id);
                        })
                        .always(function() {
                            intellitect.utilities.hideBusy();
                            self.isLoading(false);
                        });
                }
            };

            self.reload = function(callback) {
                self.load(self.@(model.PrimaryKey.JsVariable)(), callback);
            };

            // Deletes the object after a confirmation box.
            self.deleteItemWithConfirmation = function(callback, message) {
                if (typeof message != 'string') {
                    message = "Delete this item?";
                }
                if (confirm(message)) {
                    self.deleteItem(callback);
                }
            };

            // Deletes the object
            self.deleteItem = function(callback) {
                var currentId = self.@(model.PrimaryKey.JsVariable)();
                if (currentId){
                $.ajax({ method: "POST", url: areaUrl+ "@(model.ApiUrl)/Delete/" + currentId, xhrFields: { withCredentials: true } })
                .done(function(data) {
                    if (data) {
                        self.errorMessage('');
                        // The object is now deleted. Call any callback.
                        for (var i in self.deleteCallbacks) {
                            self.deleteCallbacks[i](self);
                        }
                        // Remove it from the parent collection
                        if (self.parentCollection && self.parent) {
                            self.parent.isLoading(true);
                            self.parentCollection.splice(self.parentCollection().indexOf(self),1);
                            self.parent.isLoading(false);
                        }
                    } else {
                        self.errorMessage(data.message);
                    }
                })
                .fail(function() {
                    if (self.showFailureAlerts)
                        alert("Could not delete the item.");
                })
                .always(function() {
                    if ($.isFunction(callback)) {
                        callback(callback);
                    }
                });
                }else{
                    // No ID has been assigned yet, just remove it.
                    if (self.parentCollection && self.parent) {
                        self.parent.isLoading(true);
                        self.parentCollection.splice(self.parentCollection().indexOf(self),1);
                        self.parent.isLoading(false);
                    }
                    if ($.isFunction(callback)) {
                        callback(callback);
                    }
                }
            };

            // Sets isSelected(true) on this object and clears on the rest of the items in the parentCollection. Returns true to bubble additional click events.
            self.selectSingle = function () {
                if (self.parentCollection()) {
                    $.each(self.parentCollection(), function (i, obj) {
                        obj.isSelected(false);
                    });
                }
                self.isSelected(true);
                return true; // Allow other click events
            };

            // Toggles isSelected value. Returns true to bubble additional click events.
            self.isSelectedToggle = function() {
                self.isSelected(!self.isSelected());
                return true;
            }

            // Methods to add to child collections
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
            <text>
            self.addTo@(prop.Name) = function() {
                var newItem = new @(prop.Object.ViewModelClassName)();
                newItem.parent = self;
                newItem.parentCollection = self.@prop.JsVariable;
                newItem.isExpanded(true);
                @if (prop.HasInverseProperty)
                {
                @:newItem.@(prop.InverseIdProperty.JsVariable)(self.@(model.PrimaryKey.JsVariable)());
                }
                else
                {
                @:newItem.@(model.PrimaryKey.JsVariable)(self.@(model.PrimaryKey.JsVariable)());
                }
                self.@(prop.JsVariable).push(newItem);
                return newItem;
            }
            </text>
            }

            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
            @:// List Object model for @(prop.Name). Allows for loading subsets of data.
            @:var _@(prop.JsVariable)List: @(listModuleName).@(prop.Object.ListViewModelClassName) = null;
            @:self.@(prop.JsVariable)List = function(loadImmediate = true) {
                @:if (!_@(prop.JsVariable)List){
                    @:_@(prop.JsVariable)List = new @(listModuleName).@(prop.Object.ListViewModelClassName)();
                    @:if (loadImmediate) load@(prop.Name)List();
                    @:self.@(prop.Parent.PrimaryKey.JsVariable).subscribe(load@(prop.Name)List)
                @:}
                @:return _@(prop.JsVariable)List;
            @:}

            @:function load@(prop.Name)List() {
                @:if (self.@(prop.Parent.PrimaryKey.JsVariable)()){
                    if (prop.InverseIdProperty != null)
                    {
                    @:_@(prop.JsVariable)List.queryString = "@(prop.InverseIdProperty.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    else {
                    @:_@(prop.JsVariable)List.queryString = "@(model.PrimaryKey.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    @:_@(prop.JsVariable)List.load();
                @:}
            @:}
            }

            // Save a many-to-many collection
            self.saveCollection = function(propertyName, childId, operation) {
                var method = (operation === "added" ? "AddToCollection" : "RemoveFromCollection");
                var currentId = self.@(model.PrimaryKey.JsVariable)();
                $.ajax({ method: "POST", url: areaUrl + '@(model.ApiUrl)/' + method + '?id=' + currentId + '&propertyName=' + propertyName + '&childId=' + childId, xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.errorMessage('');
                    self.loadFromDto(data.object, true);
                    // The object is now saved. Call any callback.
                    for (var i in self.saveCallbacks) {
                        self.saveCallbacks[i](self);
                    }
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    var validationIssues = [];
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    if (xhr.responseJSON && xhr.responseJSON.validationIssues) errorMsg = xhr.responseJSON.validationIssues;
                    self.errorMessage(errorMsg);
                    self.validationIssues(validationIssues);

                    if (self.showFailureAlerts)
                        alert("Could not save the item: " + errorMsg);
                })
                .always(function() {
                    // Nothing here yet.
                });
            };

            // Call this function when the object is deleted.
            self.onDelete = function(fn) {
                if ($.isFunction(fn)) self.deleteCallbacks.push(fn);
            };
            self.onSave = function(fn) {
                if ($.isFunction(fn)) self.saveCallbacks.push(fn);
            };

            // Saves the object is autoSave is true.
            self.autoSave = function() {
                if (!self.isLoading()){
                    self.isDirty(true);
                    if (self.isSavingAutomatically) {
                        // Batch saves.
                        if (!self.saveTimeout) {
                            self.saveTimeout = setTimeout(function() {
                                self.saveTimeout = 0;
                                // If we have a save in progress, wait...
                                if (self.isSaving()) {
                                    self.autoSave();
                                }else{
                                    self.save();
                                }
                            }, saveTimeoutInMs);
                        }
                    }
                }
            }

            // Saves the object is autoSave is true.
            self.autoSaveCollection = function(property, id, changeStatus) {
                if (!self.isLoading()) {
                    // TODO: Eventually Batch saves for many-to-many collections.
                    if (changeStatus === 'added') {
                        self.saveCollection(property, id, "added");
                    }else if (changeStatus === 'deleted') {
                        self.saveCollection(property, id, "deleted");
                    }
                }
            }

            // Save on changes
            function setupSubscriptions() {
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanWrite && !p.IsManytoManyCollection && !p.Type.IsCollection && p.HasViewModelProperty))
            {
                @:self.@(prop.JsVariable).subscribe(self.autoSave);
            }
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.IsManytoManyCollection && !p.IsInternalUse))
            {
                @:self.@(prop.ManyToManyCollectionName.ToCamelCase()).subscribe(function(changes){
                    @:if (!self.isLoading() && changes.length > 0){
                        @:for (var i in changes){
                            @:var change:any = changes[i];
                            @:self.autoSaveCollection('@(prop.ManyToManyCollectionName.ToCamelCase())', change.value.@(prop.ManyToManyCollectionProperty.Object.PrimaryKey.JsVariable)(), change.status);
                        @:}
                    @:}
                @:}, null, "arrayChange");
            }
}  

            // Create variables for ListEditorApiUrls
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && !f.IsManytoManyCollection && !f.IsInternalUse && f.PureTypeOnContext))
            {
            @:self.@prop.ListEditorUrlName = ko.computed({
                @:read: function() {
                    if (prop.ListEditorUrl == null)
                    {
                        @:return "Inverse property not set on @(model.Name) for property @(prop.Name)";
                    }
                    else
                    {
                        @: return areaUrl + '@(prop.ListEditorUrl)' + self.@(model.PrimaryKey.JsVariable)();
                    }
                @:},
                @:deferEvaluation: true
            @:});
            }
            // Create loading function for Valid Values
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
            {
            <text>
            self.load@(prop.ValidValueListName) = function(callback) {
                self.loadingValidValues++;
                $.ajax({ method: "GET", url: areaUrl + "@(prop.Object.ApiUrl)/CustomList?Fields=@(prop.Object.PrimaryKey.Name),@(prop.Object.ListTextProperty.Name)", xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isLoading(true);
                    self.@(prop.ValidValueListName.ToCamelCase())(data.list);
                    self.isLoading(false);
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.isLoading(false);

                    if (self.showFailureAlerts)
                        alert("Could not get Valid Values for @(prop.Name): " + errorMsg);
                })
                .always(function(){
                    self.loadingValidValues--;
                    if (self.loadingValidValues === 0) {
                        if ($.isFunction(callback)) {callback();}
                    }
                });
            }
            </text>
            }

            // Supply methods to pop up a model editor
            self.showEditor = function(){
                // Close any existing modal
                $('#modal-dialog').modal('hide');
                // Get new modal content
                intellitect.utilities.showBusy();
                $.ajax({ method: "GET", url: areaUrl + '@(model.Name)/EditorHtml', data: {simple: true}, xhrFields: { withCredentials: true } })
                .done(function(data){
                    // Add to DOM
                    intellitect.webApi.setupModal('Edit @(model.DisplayName)', data, true, false);
                    // Data bind
                    var lastValue = self.isSavingAutomatically;
                    self.isSavingAutomatically = false;
                    ko.applyBindings(self, document.getElementById("modal-dialog"));
                    self.isSavingAutomatically = lastValue;
                    // Show the dialog
                    $('#modal-dialog').modal('show');
                })
                .always(function() {
                    intellitect.utilities.hideBusy();
                });
            }

            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && f.HasViewModel && f.PureType.ClassViewModel.HasDbSet && !f.IsInternalUse))
            {
            @:self.show@(prop.Name)Editor = function() {
                @:if (!self.@(prop.JsVariable)()) {
                    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)());
                @:}
                @:self.@(prop.JsVariable)().showEditor()
            @:};
            }

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                var obj;
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && !f.IsInternalUse && !f.IsReadOnly))
            {
                @:// See if self.@(prop.JsVariable) needs to be loaded.
                @:if (self.@(prop.JsVariable)() == null && self.@(prop.ObjectIdProperty.JsVariable)() != null){
                    @:loadingCount++;
                    @:obj = new @(prop.Object.ViewModelClassName)();
                    @:obj.load(self.@(prop.ObjectIdProperty.JsVariable)(), function() {
                        @:loadingCount--;
                        @:self.@(prop.JsVariable)(obj);
                        @:if (loadingCount == 0 && $.isFunction(callback)){
                            @:callback();
                        @:}
                    @:});
                @:}
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };



            // Load all the valid values in parallel.
            self.loadValidValues = function(callback) {
                @if (model.Properties.Any(f => f.HasValidValues && !f.IsInternalUse))
                {
                @:self.loadingValidValues = 0;
                foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasValidValues && !f.IsInternalUse))
                {
                @:self.load@(prop.ValidValueListName)(callback);
                }
                }
                else
                {
                @:if ($.isFunction(callback)) callback();
                }
            };

            // Enumeration Lookups.
            @foreach (PropertyViewModel prop in model.Properties.Where(f => (f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)) && !f.IsInternalUse))
            {
            @:self.@(prop.JsTextPropertyName) = ko.computed(function() {
                @:for(var i=0;i < self.@(prop.JsVariable)Values.length; i++){
                    @:if (self.@(prop.JsVariable)Values[i].id == self.@(prop.JsVariable)()){
                        @:return self.@(prop.JsVariable)Values[i].value;
                    @:}
                @:}
            @:});
            }

            // Code to handle saving flags.
            // Returns true if this object or any of its children is saving.
            self.isSavingWithChildren = ko.computed(function() {
                if (self.isSaving()) return true;
                if (self.savingChildCount() > 0 ) return true;
                return false;
            });
            // Handles setting the parent savingChildChange
            self.isSaving.subscribe(function(newValue: boolean){
                if (self.parent && $.isFunction(self.parent.savingChildChange)){
                    self.parent.savingChildChange(newValue);
                }
            })
            // Handle children that are saving.
            self.savingChildChange = function(isSaving: boolean){
                if (isSaving) self.savingChildCount(self.savingChildCount() + 1);
                else self.savingChildCount(self.savingChildCount() - 1);
                if (self.parent && $.isFunction(self.parent.savingChildChange)){
                    self.parent.savingChildChange(isSaving);
                }
            }

            // Code to handle isDataFromSaveLoaded
            self.isDataFromSaveLoadedComputed = function() {
                if (self.isDataFromSaveLoaded === false) return false;
                if (self.isDataFromSaveLoaded === true) return true;
                if (self.parent && $.isFunction(self.parent.isDataFromSaveLoadedComputed)){
                    return self.parent.isDataFromSaveLoadedComputed();
                }
                return true;
            }


            // Method Implementations
            @foreach (var method in model.Methods.Where(m => m.IsClientMethod && (!m.IsStatic || m.ReturnType.Name == model.Name)))
            {
            <text>
            self.@method.JsVariable = function(@method.TsParameters.Replace("reload?: boolean", "reload: boolean = true")){
                self.@(method.JsVariableIsLoading)(true);
                $.ajax({ method: "POST",
                         url: areaUrl + "@(method.ApiUrl)",
                         data: @method.JsPostObject,
                         xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isDirty(false);
                    self.@(method.JsVariableMessage)('');
                    self.@(method.JsVariableWasSuccessful)(true);
                @if (method.ReturnType.IsPOCO && method.ReturnType.HasClassViewModel)
                {
                    @:if (!self.@(method.JsVariableResult)()){
                        @:self.@(method.JsVariableResult)(new @(method.ReturnType.ClassViewModel.ViewModelClassName)(data.object));
                    @:}else{
                        @:self.@(method.JsVariableResult)().loadFromDto(data.object);
                    @:}
                }
                else
                {
                    @:self.@(method.JsVariableResult)(data.object);
                }
                    @if (method.ReturnType.Name == method.Parent.Name)
                    {
                    @:// The return type is the type of the object, load it.
                    @:self.loadFromDto(data.object, true)
                    @:if ($.isFunction(callback)) {
                        @:callback();
                    @:}
                    }
                    else
                    {
                    @:if (reload) {
                    @:  self.reload(callback);
                    @:} else if ($.isFunction(callback)) {
                    @:  callback(data);
                    @:}
                    }
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.@(method.JsVariableWasSuccessful)(false);
                    self.@(method.JsVariableMessage)(errorMsg);

                    if (self.showFailureAlerts)
                        alert("Could not call method @method.JsVariable: " + errorMsg);
                })
                .always(function() {
                    self.@(method.JsVariableIsLoading)(false);
                });
            }
            </text>

            @:self.@method.JsVariableUi = function(callback?: any, reload: boolean = true) {
                @foreach (var param in method.ClientParameters.Where(f => f.ConvertsFromJsString))
                {
                @:var @param.Name: @param.Type.TsType = @param.Type.TsConvertFromString($"prompt('{param.Name.ToProperCase()}')");
                }
                @foreach(var param in method.ClientParameters.Where(f=>!f.ConvertsFromJsString))
                {
                @:var @param.Name: @param.Type.TsType = null;
                }
                @:self.@(method.JsVariable)(@(method.JsArguments("", true)), reload);
            @:}

            @:self.@method.JsVariableModal = function(callback?: any, reload: boolean = true) {
                @if (method.ClientParameters.Any()) {
                @:$('#method-@method.Name').modal();
                @:$('#method-@method.Name').on('shown.bs.modal', function() {
                    @:$('#method-@method.Name .btn-ok').unbind('click');
                    @:$('#method-@method.Name .btn-ok').click(function()
                    @:{
                        @:self.@(method.JsVariableWithArgs)(null, callback, reload);
                        @:$('#method-@method.Name').modal('hide');
                    @:});
                @:});
                }
                else
                {
                    @:self.@(method.JsVariableUi)(callback, reload);
                }
            @:}

            @if (method.ClientParameters.Any()) {
            @:self.@(method.JsVariableWithArgs) = function(args?: @(model.ViewModelClassName).@(method.ArgsName), callback?: any, reload: boolean = true) {
                @:if (!args) args = self.@(method.JsVariableArgs);
                @:self.@(method.JsVariable)(@(method.JsArguments("args", true)), reload);
            @:}
            }
            }


            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables
            @foreach (PropertyViewModel prop in model.Properties.Where(f=>f.IsComplexType && !f.IsInternalUse))
            {
            @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(self));
            }

            // Make sure everything is defined before we call this.
            setupSubscriptions();

            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }



        }
    }





    export namespace @(model.ViewModelClassName) {
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:export enum @(prop.Name)Enum {
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:@kvp.Value = @kvp.Key,
        }
        @:};
        }

        // Classes for use in method calls to support data binding for input for arguments
        @foreach(MethodViewModel method in model.Methods.Where(f => f.ClientParameters.Any() && (!f.IsStatic || f.ReturnType.Name == model.Name) && f.IsClientMethod)){
        @:export class @(method.ArgsName) {
            @foreach (var arg in method.ClientParameters)
            {
            @:public @(arg.CsArgumentName): @(arg.Type.TsKnockoutType) = @(arg.Type.JsKnockoutType);
            }
        @:}
        }
    }
}